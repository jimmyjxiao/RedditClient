//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "NewPostPopup.xaml.h"

void ::Reddit::NewPostPopup::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///NewPostPopup.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::NewPostPopup::NewPostPopup_obj1_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::Reddit::NewPostPopup, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    NewPostPopup_obj1_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~NewPostPopup_obj1_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 2: // NewPostPopup.xaml line 22
                this->obj2 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj2->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->PostTitle = this->obj2->Text;
                            }
                        });
                break;
            case 4: // NewPostPopup.xaml line 24
                this->obj4 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                break;
            case 6: // NewPostPopup.xaml line 26
                this->obj6 = safe_cast<::Windows::UI::Xaml::Controls::ToggleSwitch^>(__target);
                this->obj6->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::ToggleSwitch::IsOnProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->NSFW = this->obj6->IsOn;
                            }
                        }));
                break;
            case 7: // NewPostPopup.xaml line 27
                this->obj7 = safe_cast<::Windows::UI::Xaml::Controls::ToggleSwitch^>(__target);
                this->obj7->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::ToggleSwitch::IsOnProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->Spoiler = this->obj7->IsOn;
                            }
                        }));
                break;
            case 10: // NewPostPopup.xaml line 47
                this->obj10 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                // NewPostPopup.xaml line 47
                if (this->obj10 != nullptr)
                {
                    Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj10, this->obj10TextDeferredValue, nullptr);
                }
                break;
            case 11: // NewPostPopup.xaml line 48
                this->obj11 = safe_cast<::mdblock::MDFullEnhancedEditor^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        switch (connectionId)
        {
            case 10: // NewPostPopup.xaml line 47
            {
                if (this->obj10 != nullptr)
                {
                    this->obj10TextDeferredValue = this->obj10->Text;
                    this->obj10 = nullptr;
                }
                break;
            }
            case 11: // NewPostPopup.xaml line 48
            {
                if (this->obj11 != nullptr)
                {
                    this->obj11 = nullptr;
                }
                break;
            }
            default:
            {
                throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
            }
        }
    }

    void UpdateUnloadedElement(int connectionId)
    {
        switch (connectionId)
        {
            case 10: // NewPostPopup.xaml line 47
            {
                // NewPostPopup.xaml line 47
                if (this->obj10LoadDeferredValue)
                {
                    this->GetDataRoot()->FindName("mdEditor");
                }
                else
                {
                    this->GetDataRoot()->UnloadObject(this->obj10);
                }
                break;
            }
            case 11: // NewPostPopup.xaml line 48
            {
                // NewPostPopup.xaml line 48
                if (this->obj11LoadDeferredValue)
                {
                    this->GetDataRoot()->FindName("WYSIWYG");
                }
                else
                {
                    this->GetDataRoot()->UnloadObject(this->obj11);
                }
                break;
            }
            default:
            {
                throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
            }
        }
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::TextBox^ obj2;
    ::Windows::UI::Xaml::Controls::TextBox^ obj4;
    ::Windows::UI::Xaml::Controls::ToggleSwitch^ obj6;
    ::Windows::UI::Xaml::Controls::ToggleSwitch^ obj7;
    ::Windows::UI::Xaml::Controls::TextBox^ obj10;
    ::Platform::Boolean obj10LoadDeferredValue;
    ::Platform::String^ obj10TextDeferredValue;
    ::mdblock::MDFullEnhancedEditor^ obj11;
    ::Platform::Boolean obj11LoadDeferredValue;
    std::list<int> UnloadedElementsToUpdate;
    
    // Fields for binding tracking.
    ::Windows::UI::Xaml::DependencyObject^ cacheDPC_editorSwitch_IsOn = nullptr;
    __int64 tokenDPC_editorSwitch_IsOn = 0;

    void CompleteUpdate(int phase)
    {
        while (!this->UnloadedElementsToUpdate.empty())
        {
            this->UpdateUnloadedElement(this->UnloadedElementsToUpdate.front());
            this->UnloadedElementsToUpdate.pop_front();
        }
    }

    // Update methods for each path node used in binding steps.
    void Update_(::Reddit::NewPostPopup^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_PostTitle(obj->PostTitle, phase);
                this->Update_Subreddit(obj->Subreddit, phase);
                this->Update_NSFW(obj->NSFW, phase);
                this->Update_Spoiler(obj->Spoiler, phase);
                this->Update_editorSwitch(obj->editorSwitch, phase);
                this->Update_md(obj->md, phase);
            }
        }
        this->CompleteUpdate(phase);
    }
    void Update_PostTitle(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // NewPostPopup.xaml line 22
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj2, obj, nullptr);
        }
    }
    void Update_Subreddit(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // NewPostPopup.xaml line 24
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj4, obj, nullptr);
        }
    }
    void Update_NSFW(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // NewPostPopup.xaml line 26
            Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this->obj6, obj);
        }
    }
    void Update_Spoiler(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // NewPostPopup.xaml line 27
            Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this->obj7, obj);
        }
    }
    void Update_editorSwitch(::Windows::UI::Xaml::Controls::ToggleSwitch^ obj, int phase)
    {
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(obj, ::Windows::UI::Xaml::Controls::ToggleSwitch::IsOnProperty, &this->cacheDPC_editorSwitch_IsOn, &this->tokenDPC_editorSwitch_IsOn);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_editorSwitch_IsOn(obj->IsOn, phase);
            }
        }
    }
    void Update_editorSwitch_IsOn(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // NewPostPopup.xaml line 47
            this->obj10LoadDeferredValue = safe_cast<::Platform::Boolean>(this->LookupConverter("boolFlipper")->Convert(obj, ::Platform::Boolean::typeid, nullptr, nullptr));
    
            if (safe_cast<::Platform::Boolean>(this->LookupConverter("boolFlipper")->Convert(obj, ::Platform::Boolean::typeid, nullptr, nullptr)))
            {
                this->GetDataRoot()->FindName("mdEditor");
            }
            else
            {
                this->GetDataRoot()->UnloadObject(this->obj10);
            }
            // NewPostPopup.xaml line 48
            this->obj11LoadDeferredValue = obj;
    
            if (obj)
            {
                this->GetDataRoot()->FindName("WYSIWYG");
            }
            else
            {
                this->GetDataRoot()->UnloadObject(this->obj11);
            }
        }
    }
    void Update_md(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // NewPostPopup.xaml line 47
            if (this->obj10 != nullptr)
            {
                Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj10, obj, nullptr);
            }
            else
            {
                this->obj10TextDeferredValue = obj;
            }
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(nullptr, ::Windows::UI::Xaml::Controls::ToggleSwitch::IsOnProperty, &this->cacheDPC_editorSwitch_IsOn, &this->tokenDPC_editorSwitch_IsOn);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
            if (sender->Equals(this->cacheDPC_editorSwitch_IsOn) && ::Windows::UI::Xaml::Controls::ToggleSwitch::IsOnProperty->Equals(prop))
            {
                ::Windows::UI::Xaml::Controls::ToggleSwitch^ obj = safe_cast<::Windows::UI::Xaml::Controls::ToggleSwitch^>(sender);
                if (obj != nullptr)
                {
                    this->Update_editorSwitch_IsOn(obj->IsOn, DATA_CHANGED);
                }
            }
        }
    }
    static void Set_Windows_UI_Xaml_Controls_TextBox_Text(::Windows::UI::Xaml::Controls::TextBox^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(::Windows::UI::Xaml::Controls::ToggleSwitch^ obj, ::Platform::Boolean value)
    {
        obj->IsOn = value;
    }
};

void ::Reddit::NewPostPopup::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 1:
        {
            ::Windows::UI::Xaml::Controls::ContentDialog^ element1 = safe_cast<::Windows::UI::Xaml::Controls::ContentDialog^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::ContentDialog^>(element1))->Opened += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::ContentDialog^, ::Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs^>(this, (void (::Reddit::NewPostPopup::*)
                (::Windows::UI::Xaml::Controls::ContentDialog^, ::Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs^))&NewPostPopup::ContentDialog_Opened);
            (safe_cast<::Windows::UI::Xaml::Controls::ContentDialog^>(element1))->PrimaryButtonClick += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::ContentDialog^, ::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs^>(this, (void (::Reddit::NewPostPopup::*)
                (::Windows::UI::Xaml::Controls::ContentDialog^, ::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs^))&NewPostPopup::ContentDialog_PrimaryButtonClick);
            (safe_cast<::Windows::UI::Xaml::Controls::ContentDialog^>(element1))->SecondaryButtonClick += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::ContentDialog^, ::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs^>(this, (void (::Reddit::NewPostPopup::*)
                (::Windows::UI::Xaml::Controls::ContentDialog^, ::Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs^))&NewPostPopup::ContentDialog_SecondaryButtonClick);
        }
        break;
    case 2:
        {
            this->titleBox = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->titleBox))->TextChanged += ref new ::Windows::UI::Xaml::Controls::TextChangedEventHandler(this, (void (::Reddit::NewPostPopup::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::TextChangedEventArgs^))&NewPostPopup::title_changed);
        }
        break;
    case 3:
        {
            this->charCounter = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 4:
        {
            this->subbox = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->subbox))->PreviewKeyDown += ref new ::Windows::UI::Xaml::Input::KeyEventHandler(this, (void (::Reddit::NewPostPopup::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Input::KeyRoutedEventArgs^))&NewPostPopup::subbox_PreviewKeyDown);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->subbox))->TextChanged += ref new ::Windows::UI::Xaml::Controls::TextChangedEventHandler(this, (void (::Reddit::NewPostPopup::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::TextChangedEventArgs^))&NewPostPopup::subbox_TextChanged);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->subbox))->BeforeTextChanging += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs^>(this, (void (::Reddit::NewPostPopup::*)
                (::Windows::UI::Xaml::Controls::TextBox^, ::Windows::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs^))&NewPostPopup::subbox_BeforeTextChanging);
        }
        break;
    case 5:
        {
            this->subErrorBox = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 6:
        {
            this->NSFWSwitch = safe_cast<::Windows::UI::Xaml::Controls::ToggleSwitch^>(__target);
        }
        break;
    case 8:
        {
            this->contentHeader = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 9:
        {
            this->editorSwitch = safe_cast<::Windows::UI::Xaml::Controls::ToggleSwitch^>(__target);
        }
        break;
    case 10:
        {
            this->mdEditor = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->mdEditor))->Loaded += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::NewPostPopup::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&NewPostPopup::mdEditor_Loaded);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(this->mdEditor))->Unloaded += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::NewPostPopup::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&NewPostPopup::mdEditor_Unloaded);
        }
        break;
    case 11:
        {
            this->WYSIWYG = safe_cast<::mdblock::MDFullEnhancedEditor^>(__target);
            (safe_cast<::mdblock::MDFullEnhancedEditor^>(this->WYSIWYG))->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(this, (void (::Reddit::NewPostPopup::*)
                (::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^))&NewPostPopup::WYSIWYG_Loading);
            (safe_cast<::mdblock::MDFullEnhancedEditor^>(this->WYSIWYG))->Unloaded += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::NewPostPopup::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&NewPostPopup::WYSIWYG_Unloaded);
        }
        break;
    }
    _contentLoaded = true;
}

void ::Reddit::NewPostPopup::UnloadObject(::Windows::UI::Xaml::DependencyObject^ unloadableObject)
{
    if (unloadableObject != nullptr)
    {
        // NewPostPopup.xaml line 47
        if (unloadableObject == this->mdEditor)
        {
            this->DisconnectUnloadedObject(10);
        }
        // NewPostPopup.xaml line 48
        if (unloadableObject == this->WYSIWYG)
        {
            this->DisconnectUnloadedObject(11);
        }
        ::Windows::UI::Xaml::Markup::XamlMarkupHelper::UnloadObject(unloadableObject);
    }
}

void ::Reddit::NewPostPopup::DisconnectUnloadedObject(int connectionId)
{
    switch(connectionId)
    {
        case 10: // NewPostPopup.xaml line 47
        {
            this->Bindings->DisconnectUnloadedObject(10);
            this->mdEditor = nullptr;
            break;
        }
        case 11: // NewPostPopup.xaml line 48
        {
            this->Bindings->DisconnectUnloadedObject(11);
            this->WYSIWYG = nullptr;
            break;
        }
        default:
        {
            throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
        }
    }
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::Reddit::NewPostPopup::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1: // NewPostPopup.xaml line 1
            {
                ::Windows::UI::Xaml::Controls::ContentDialog^ element1 = safe_cast<::Windows::UI::Xaml::Controls::ContentDialog^>(__target);
                NewPostPopup_obj1_Bindings* objBindings = new NewPostPopup_obj1_Bindings();
                objBindings->SetDataRoot(this);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


