//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "SubRedditViewPage.xaml.h"

void ::Reddit::SubRedditViewPage::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///SubRedditViewPage.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::SubRedditViewPage::SubRedditViewPage_obj2_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::account::subpostUWP>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    SubRedditViewPage_obj2_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~SubRedditViewPage_obj2_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 3: // SubRedditViewPage.xaml line 79
                this->obj3 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 4: // SubRedditViewPage.xaml line 89
                this->obj4 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
                break;
            case 5: // SubRedditViewPage.xaml line 94
                this->obj5 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
                break;
            case 6: // SubRedditViewPage.xaml line 85
                this->obj6 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 7: // SubRedditViewPage.xaml line 85
                this->obj7 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 8: // SubRedditViewPage.xaml line 82
                this->obj8 = safe_cast<::Reddit::subpostContentResizingPlaceholder^>(__target);
                break;
            case 9: // SubRedditViewPage.xaml line 76
                this->obj9 = safe_cast<::Windows::UI::Xaml::Media::Imaging::BitmapImage^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void ResetTemplate()
    {
        ReleaseAllListeners();
    }

    int ProcessBindings(::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs^ args)
    {
        int nextPhase = -1;
        switch(args->Phase)
        {
            case 0:
                nextPhase = -1;
                this->SetDataRoot(static_cast<::account::subpostUWP^>(args->Item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    safe_cast<::Windows::UI::Xaml::FrameworkElement^>(args->ItemContainer->ContentTemplateRoot)->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
        }
        this->Update_((::account::subpostUWP^) args->Item, (1 << args->Phase));
        return nextPhase;
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::TextBlock^ obj3;
    ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj4;
    ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj5;
    ::Windows::UI::Xaml::Documents::Run^ obj6;
    ::Windows::UI::Xaml::Documents::Run^ obj7;
    ::Reddit::subpostContentResizingPlaceholder^ obj8;
    ::Windows::UI::Xaml::Media::Imaging::BitmapImage^ obj9;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::account::subpostUWP^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Title(obj->Title, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Liked(obj->Liked, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changeupvote(obj->changeupvote, phase);
                this->Update_changedownvote(obj->changedownvote, phase);
                this->Update_subreddit(obj->subreddit, phase);
                this->Update_OP(obj->OP, phase);
                this->Update_thumbnailURI(obj->thumbnailURI, phase);
            }
        }
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 82
            ::XamlBindingInfo::XamlBindingSetters::Set_Reddit_subpostContentResizingPlaceholder_post(this->obj8, obj, nullptr);
        }
    }
    void Update_Title(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 79
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj3, obj, nullptr);
        }
    }
    void Update_Liked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 89
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj4, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("upvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
            // SubRedditViewPage.xaml line 94
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj5, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("downvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_changeupvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 89
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj4, obj, nullptr);
        }
    }
    void Update_changedownvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 94
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj5, obj, nullptr);
        }
    }
    void Update_subreddit(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 85
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj6, obj, nullptr);
        }
    }
    void Update_OP(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 85
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj7, obj, nullptr);
        }
    }
    void Update_thumbnailURI(::Windows::Foundation::Uri^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 76
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Media_Imaging_BitmapImage_UriSource(this->obj9, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::account::subpostUWP^ obj = safe_cast<::account::subpostUWP^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
            else if (propName == "Liked")
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::SubRedditViewPage::SubRedditViewPage_obj10_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::account::subpostUWP>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    SubRedditViewPage_obj10_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~SubRedditViewPage_obj10_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 11: // SubRedditViewPage.xaml line 38
                this->obj11 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 12: // SubRedditViewPage.xaml line 48
                this->obj12 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
                break;
            case 13: // SubRedditViewPage.xaml line 53
                this->obj13 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
                break;
            case 14: // SubRedditViewPage.xaml line 44
                this->obj14 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 15: // SubRedditViewPage.xaml line 44
                this->obj15 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 16: // SubRedditViewPage.xaml line 41
                this->obj16 = safe_cast<::Windows::UI::Xaml::Controls::RichTextBlock^>(__target);
                break;
            case 17: // SubRedditViewPage.xaml line 35
                this->obj17 = safe_cast<::Windows::UI::Xaml::Media::Imaging::BitmapImage^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void ResetTemplate()
    {
        ReleaseAllListeners();
    }

    int ProcessBindings(::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs^ args)
    {
        int nextPhase = -1;
        switch(args->Phase)
        {
            case 0:
                nextPhase = -1;
                this->SetDataRoot(static_cast<::account::subpostUWP^>(args->Item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    safe_cast<::Windows::UI::Xaml::FrameworkElement^>(args->ItemContainer->ContentTemplateRoot)->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
        }
        this->Update_((::account::subpostUWP^) args->Item, (1 << args->Phase));
        return nextPhase;
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::TextBlock^ obj11;
    ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj12;
    ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj13;
    ::Windows::UI::Xaml::Documents::Run^ obj14;
    ::Windows::UI::Xaml::Documents::Run^ obj15;
    ::Windows::UI::Xaml::Controls::RichTextBlock^ obj16;
    ::Windows::UI::Xaml::Media::Imaging::BitmapImage^ obj17;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::account::subpostUWP^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Title(obj->Title, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Liked(obj->Liked, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changeupvote(obj->changeupvote, phase);
                this->Update_changedownvote(obj->changedownvote, phase);
                this->Update_subreddit(obj->subreddit, phase);
                this->Update_OP(obj->OP, phase);
                this->Update_selftext_html(obj->selftext_html, phase);
                this->Update_thumbnailURI(obj->thumbnailURI, phase);
            }
        }
    }
    void Update_Title(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 38
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj11, obj, nullptr);
        }
    }
    void Update_Liked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 48
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj12, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("upvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
            // SubRedditViewPage.xaml line 53
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj13, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("downvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_changeupvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 48
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj12, obj, nullptr);
        }
    }
    void Update_changedownvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 53
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj13, obj, nullptr);
        }
    }
    void Update_subreddit(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 44
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj14, obj, nullptr);
        }
    }
    void Update_OP(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 44
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj15, obj, nullptr);
        }
    }
    void Update_selftext_html(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 41
            ::XamlBindingInfo::XamlBindingSetters::Set_html2xaml_Properties_Html(this->obj16, obj, nullptr);
        }
    }
    void Update_thumbnailURI(::Windows::Foundation::Uri^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 35
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Media_Imaging_BitmapImage_UriSource(this->obj17, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::account::subpostUWP^ obj = safe_cast<::account::subpostUWP^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
            else if (propName == "Liked")
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::SubRedditViewPage::SubRedditViewPage_obj20_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::account::subpostUWP>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    SubRedditViewPage_obj20_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~SubRedditViewPage_obj20_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 21: // SubRedditViewPage.xaml line 380
                this->obj21 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 22: // SubRedditViewPage.xaml line 381
                this->obj22 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 23: // SubRedditViewPage.xaml line 391
                this->obj23 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 24: // SubRedditViewPage.xaml line 395
                this->obj24 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 25: // SubRedditViewPage.xaml line 387
                this->obj25 = safe_cast<::Windows::UI::Xaml::Controls::Primitives::ToggleButton^>(__target);
                break;
            case 26: // SubRedditViewPage.xaml line 388
                this->obj26 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 27: // SubRedditViewPage.xaml line 389
                this->obj27 = safe_cast<::Windows::UI::Xaml::Controls::Primitives::ToggleButton^>(__target);
                break;
            case 28: // SubRedditViewPage.xaml line 383
                this->obj28 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void ResetTemplate()
    {
        ReleaseAllListeners();
    }

    int ProcessBindings(::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs^ args)
    {
        int nextPhase = -1;
        switch(args->Phase)
        {
            case 0:
                nextPhase = -1;
                this->SetDataRoot(static_cast<::account::subpostUWP^>(args->Item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    safe_cast<::Windows::UI::Xaml::FrameworkElement^>(args->ItemContainer->ContentTemplateRoot)->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
        }
        this->Update_((::account::subpostUWP^) args->Item, (1 << args->Phase));
        return nextPhase;
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::TextBlock^ obj21;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj22;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj23;
    ::Windows::UI::Xaml::Documents::Run^ obj24;
    ::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj25;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj26;
    ::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj27;
    ::Windows::UI::Xaml::Documents::Run^ obj28;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::account::subpostUWP^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Title(obj->Title, phase);
                this->Update_OP(obj->OP, phase);
                this->Update_selftext_html(obj->selftext_html, phase);
                this->Update_num_comments(obj->num_comments, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Liked(obj->Liked, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changeupvote(obj->changeupvote, phase);
                this->Update_score(obj->score, phase);
                this->Update_changedownvote(obj->changedownvote, phase);
                this->Update_subreddit(obj->subreddit, phase);
            }
        }
    }
    void Update_Title(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 380
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj21, obj, nullptr);
        }
    }
    void Update_OP(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 381
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj22, obj, nullptr);
        }
    }
    void Update_selftext_html(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 391
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj23, safe_cast<::Platform::String^>(this->LookupConverter("htmlPrev")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_num_comments(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 395
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj24, obj.ToString(), nullptr);
        }
    }
    void Update_Liked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 387
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj25, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("upvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
            // SubRedditViewPage.xaml line 389
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj27, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("downvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_changeupvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 387
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj25, obj, nullptr);
        }
    }
    void Update_score(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 388
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj26, obj.ToString(), nullptr);
        }
    }
    void Update_changedownvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 389
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj27, obj, nullptr);
        }
    }
    void Update_subreddit(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 383
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj28, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::account::subpostUWP^ obj = safe_cast<::account::subpostUWP^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
            else if (propName == "Liked")
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::SubRedditViewPage::SubRedditViewPage_obj29_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::account::subpostUWP>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    SubRedditViewPage_obj29_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~SubRedditViewPage_obj29_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 30: // SubRedditViewPage.xaml line 340
                this->obj30 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 31: // SubRedditViewPage.xaml line 341
                this->obj31 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 32: // SubRedditViewPage.xaml line 351
                this->obj32 = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
                break;
            case 33: // SubRedditViewPage.xaml line 364
                this->obj33 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 34: // SubRedditViewPage.xaml line 358
                this->obj34 = safe_cast<::Windows::UI::Xaml::Shapes::Path^>(__target);
                break;
            case 35: // SubRedditViewPage.xaml line 355
                this->obj35 = safe_cast<::Windows::UI::Xaml::Media::Imaging::BitmapImage^>(__target);
                break;
            case 36: // SubRedditViewPage.xaml line 347
                this->obj36 = safe_cast<::Windows::UI::Xaml::Controls::Primitives::ToggleButton^>(__target);
                break;
            case 37: // SubRedditViewPage.xaml line 348
                this->obj37 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 38: // SubRedditViewPage.xaml line 349
                this->obj38 = safe_cast<::Windows::UI::Xaml::Controls::Primitives::ToggleButton^>(__target);
                break;
            case 39: // SubRedditViewPage.xaml line 343
                this->obj39 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void ResetTemplate()
    {
        ReleaseAllListeners();
    }

    int ProcessBindings(::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs^ args)
    {
        int nextPhase = -1;
        switch(args->Phase)
        {
            case 0:
                nextPhase = -1;
                this->SetDataRoot(static_cast<::account::subpostUWP^>(args->Item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    safe_cast<::Windows::UI::Xaml::FrameworkElement^>(args->ItemContainer->ContentTemplateRoot)->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
        }
        this->Update_((::account::subpostUWP^) args->Item, (1 << args->Phase));
        return nextPhase;
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::TextBlock^ obj30;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj31;
    ::Windows::UI::Xaml::Controls::Button^ obj32;
    ::Windows::UI::Xaml::Documents::Run^ obj33;
    ::Windows::UI::Xaml::Shapes::Path^ obj34;
    ::Windows::UI::Xaml::Media::Imaging::BitmapImage^ obj35;
    ::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj36;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj37;
    ::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj38;
    ::Windows::UI::Xaml::Documents::Run^ obj39;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::account::subpostUWP^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Title(obj->Title, phase);
                this->Update_OP(obj->OP, phase);
                this->Update_previewCommand(obj->previewCommand, phase);
                this->Update_num_comments(obj->num_comments, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_contentType(obj->contentType, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_previewURI(obj->previewURI, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Liked(obj->Liked, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changeupvote(obj->changeupvote, phase);
                this->Update_score(obj->score, phase);
                this->Update_changedownvote(obj->changedownvote, phase);
                this->Update_subreddit(obj->subreddit, phase);
            }
        }
    }
    void Update_Title(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 340
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj30, obj, nullptr);
        }
    }
    void Update_OP(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 341
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj31, obj, nullptr);
        }
    }
    void Update_previewCommand(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 351
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj32, obj, nullptr);
        }
    }
    void Update_num_comments(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 364
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj33, obj.ToString(), nullptr);
        }
    }
    void Update_contentType(::account::postContentType obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 358
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Shapes_Path_Data(this->obj34, safe_cast<::Windows::UI::Xaml::Media::Geometry^>(this->LookupConverter("pathdataconvz")->Convert(obj, ::Windows::UI::Xaml::Media::Geometry::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_previewURI(::Windows::Foundation::Uri^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 355
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Media_Imaging_BitmapImage_UriSource(this->obj35, obj, nullptr);
        }
    }
    void Update_Liked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 347
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj36, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("upvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
            // SubRedditViewPage.xaml line 349
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj38, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("downvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_changeupvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 347
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj36, obj, nullptr);
        }
    }
    void Update_score(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 348
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj37, obj.ToString(), nullptr);
        }
    }
    void Update_changedownvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 349
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj38, obj, nullptr);
        }
    }
    void Update_subreddit(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // SubRedditViewPage.xaml line 343
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj39, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::account::subpostUWP^ obj = safe_cast<::account::subpostUWP^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_contentType(obj->contentType, DATA_CHANGED);
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
            else if (propName == "contentType")
            {
                if (obj != nullptr)
                {
                    this->Update_contentType(obj->contentType, DATA_CHANGED);
                }
            }
            else if (propName == "Liked")
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::SubRedditViewPage::SubRedditViewPage_obj1_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::Reddit::SubRedditViewPage>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    SubRedditViewPage_obj1_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~SubRedditViewPage_obj1_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 40: // SubRedditViewPage.xaml line 405
                this->obj40 = safe_cast<::Windows::UI::Xaml::Controls::CommandBar^>(__target);
                break;
            case 42: // SubRedditViewPage.xaml line 519
                this->obj42 = safe_cast<::Windows::UI::Xaml::Controls::SplitView^>(__target);
                this->obj42->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::SplitView::IsPaneOpenProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->sideBarButton->IsChecked = safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("boxConv")->ConvertBack(this->obj42->IsPaneOpen, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr));
                            }
                        }));
                break;
            case 44: // SubRedditViewPage.xaml line 524
                this->obj44 = safe_cast<::Windows::UI::Xaml::Controls::GridView^>(__target);
                // SubRedditViewPage.xaml line 524
                if (this->obj44 != nullptr)
                {
                    ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj44, this->obj44ItemsSourceDeferredValue, nullptr);
                }
                break;
            case 45: // SubRedditViewPage.xaml line 525
                this->obj45 = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
                // SubRedditViewPage.xaml line 525
                if (this->obj45 != nullptr)
                {
                    ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj45, this->obj45ItemsSourceDeferredValue, nullptr);
                }
                break;
            case 46: // SubRedditViewPage.xaml line 513
                this->obj46 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 48: // SubRedditViewPage.xaml line 516
                this->obj48 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 51: // SubRedditViewPage.xaml line 412
                this->obj51 = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
                break;
            case 52: // SubRedditViewPage.xaml line 449
                this->obj52 = safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutSeparator^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        switch (connectionId)
        {
            case 44: // SubRedditViewPage.xaml line 524
            {
                if (this->obj44 != nullptr)
                {
                    this->obj44ItemsSourceDeferredValue = this->obj44->ItemsSource;
                    this->obj44 = nullptr;
                }
                break;
            }
            case 45: // SubRedditViewPage.xaml line 525
            {
                if (this->obj45 != nullptr)
                {
                    this->obj45ItemsSourceDeferredValue = this->obj45->ItemsSource;
                    this->obj45 = nullptr;
                }
                break;
            }
            default:
            {
                throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
            }
        }
    }

    void UpdateUnloadedElement(int connectionId)
    {
        switch (connectionId)
        {
            case 44: // SubRedditViewPage.xaml line 524
            {
                // SubRedditViewPage.xaml line 524
                if (this->obj44LoadDeferredValue)
                {
                    this->GetDataRoot()->FindName("listGrid");
                }
                else
                {
                    this->GetDataRoot()->UnloadObject(this->obj44);
                }
                break;
            }
            case 45: // SubRedditViewPage.xaml line 525
            {
                // SubRedditViewPage.xaml line 525
                if (this->obj45LoadDeferredValue)
                {
                    this->GetDataRoot()->FindName("listView");
                }
                else
                {
                    this->GetDataRoot()->UnloadObject(this->obj45);
                }
                break;
            }
            default:
            {
                throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
            }
        }
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::CommandBar^ obj40;
    ::Windows::UI::Xaml::Controls::SplitView^ obj42;
    ::Windows::UI::Xaml::Controls::GridView^ obj44;
    ::Platform::Object^ obj44ItemsSourceDeferredValue;
    ::Platform::Boolean obj44LoadDeferredValue;
    ::Windows::UI::Xaml::Controls::ListView^ obj45;
    ::Platform::Object^ obj45ItemsSourceDeferredValue;
    ::Platform::Boolean obj45LoadDeferredValue;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj46;
    ::Windows::UI::Xaml::Documents::Run^ obj48;
    ::Windows::UI::Xaml::Controls::ListView^ obj51;
    ::Windows::UI::Xaml::Controls::MenuFlyoutSeparator^ obj52;
    std::list<int> UnloadedElementsToUpdate;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::UI::Xaml::DependencyObject^ cacheDPC_sideBarButton_IsChecked = nullptr;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;
    __int64 tokenDPC_sideBarButton_IsChecked = 0;

    void CompleteUpdate(int phase)
    {
        while (!this->UnloadedElementsToUpdate.empty())
        {
            this->UpdateUnloadedElement(this->UnloadedElementsToUpdate.front());
            this->UnloadedElementsToUpdate.pop_front();
        }
    }

    // Update methods for each path node used in binding steps.
    void Update_(::Reddit::SubRedditViewPage^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_subInfo(obj->subInfo, phase);
                this->Update_sideBarButton(obj->sideBarButton, phase);
                this->Update_posts(obj->posts, phase);
                this->Update_viewMode(obj->viewMode, phase);
                this->Update_Sort(obj->Sort, phase);
            }
        }
        this->CompleteUpdate(phase);
    }
    void Update_subInfo(::account::subredditInfo obj, int phase)
    {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_subInfo_key_color(obj.key_color, phase);
                this->Update_subInfo_pname(obj.pname, phase);
                this->Update_subInfo_subscribers(obj.subscribers, phase);
            }
    }
    void Update_subInfo_key_color(::Windows::UI::Color obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 405
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Control_Background(this->obj40, safe_cast<::Windows::UI::Xaml::Media::Brush^>(this->LookupConverter("brushify")->Convert(obj, ::Windows::UI::Xaml::Media::Brush::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_sideBarButton(::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj, int phase)
    {
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(obj, ::Windows::UI::Xaml::Controls::AppBarToggleButton::IsCheckedProperty, &this->cacheDPC_sideBarButton_IsChecked, &this->tokenDPC_sideBarButton_IsChecked);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_sideBarButton_IsChecked(obj->IsChecked, phase);
            }
        }
    }
    void Update_sideBarButton_IsChecked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 519
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_SplitView_IsPaneOpen(this->obj42, safe_cast<::Platform::Boolean>(this->LookupConverter("boxConv")->Convert(obj, ::Platform::Boolean::typeid, nullptr, nullptr)));
        }
    }
    void Update_posts(::Windows::Foundation::Collections::IVector<::account::subpostUWP^>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 524
            if (this->obj44 != nullptr)
            {
                ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj44, obj, nullptr);
            }
            else
            {
                this->obj44ItemsSourceDeferredValue = obj;
            }
            // SubRedditViewPage.xaml line 525
            if (this->obj45 != nullptr)
            {
                ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj45, obj, nullptr);
            }
            else
            {
                this->obj45ItemsSourceDeferredValue = obj;
            }
        }
    }
    void Update_viewMode(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 524
            this->obj44LoadDeferredValue = safe_cast<::Platform::Boolean>(this->LookupConverter("boolFlipper")->Convert(obj, ::Platform::Boolean::typeid, nullptr, nullptr));
    
            if (safe_cast<::Platform::Boolean>(this->LookupConverter("boolFlipper")->Convert(obj, ::Platform::Boolean::typeid, nullptr, nullptr)))
            {
                this->GetDataRoot()->FindName("listGrid");
            }
            else
            {
                this->GetDataRoot()->UnloadObject(this->obj44);
            }
            // SubRedditViewPage.xaml line 525
            this->obj45LoadDeferredValue = obj;
    
            if (obj)
            {
                this->GetDataRoot()->FindName("listView");
            }
            else
            {
                this->GetDataRoot()->UnloadObject(this->obj45);
            }
        }
    }
    void Update_subInfo_pname(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 513
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj46, obj, nullptr);
        }
    }
    void Update_subInfo_subscribers(::default::uint32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 516
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Documents_Run_Text(this->obj48, obj.ToString(), nullptr);
        }
    }
    void Update_Sort(::account::postSort obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 412
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_UIElement_Visibility(this->obj51, safe_cast<::Windows::UI::Xaml::Visibility>(this->LookupConverter("rangeVisConv")->Convert(obj, ::Windows::UI::Xaml::Visibility::typeid, nullptr, nullptr)));
            // SubRedditViewPage.xaml line 449
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_UIElement_Visibility(this->obj52, safe_cast<::Windows::UI::Xaml::Visibility>(this->LookupConverter("rangeVisConv")->Convert(obj, ::Windows::UI::Xaml::Visibility::typeid, nullptr, nullptr)));
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(nullptr, ::Windows::UI::Xaml::Controls::AppBarToggleButton::IsCheckedProperty, &this->cacheDPC_sideBarButton_IsChecked, &this->tokenDPC_sideBarButton_IsChecked);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::Reddit::SubRedditViewPage^ obj = safe_cast<::Reddit::SubRedditViewPage^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_subInfo(obj->subInfo, DATA_CHANGED);
                    this->Update_sideBarButton(obj->sideBarButton, DATA_CHANGED);
                    this->Update_posts(obj->posts, DATA_CHANGED);
                    this->Update_viewMode(obj->viewMode, DATA_CHANGED);
                    this->Update_Sort(obj->Sort, DATA_CHANGED);
                }
            }
            else if (propName == "subInfo")
            {
                if (obj != nullptr)
                {
                    this->Update_subInfo(obj->subInfo, DATA_CHANGED);
                }
            }
            else if (propName == "posts")
            {
                if (obj != nullptr)
                {
                    this->Update_posts(obj->posts, DATA_CHANGED);
                }
            }
            else if (propName == "viewMode")
            {
                if (obj != nullptr)
                {
                    this->Update_viewMode(obj->viewMode, DATA_CHANGED);
                }
            }
            else if (propName == "Sort")
            {
                if (obj != nullptr)
                {
                    this->Update_Sort(obj->Sort, DATA_CHANGED);
                }
            }
        }
        this->CompleteUpdate(DATA_CHANGED);
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
            if (sender->Equals(this->cacheDPC_sideBarButton_IsChecked) && ::Windows::UI::Xaml::Controls::AppBarToggleButton::IsCheckedProperty->Equals(prop))
            {
                ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(sender);
                if (obj != nullptr)
                {
                    this->Update_sideBarButton_IsChecked(obj->IsChecked, DATA_CHANGED);
                }
            }
        }
    }
};

void ::Reddit::SubRedditViewPage::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 18:
        {
            this->imageGriddatatemplate = safe_cast<::Windows::UI::Xaml::DataTemplate^>(__target);
        }
        break;
    case 19:
        {
            this->selfGridTemplate = safe_cast<::Windows::UI::Xaml::DataTemplate^>(__target);
        }
        break;
    case 40:
        {
            this->commandBar = safe_cast<::Windows::UI::Xaml::Controls::CommandBar^>(__target);
        }
        break;
    case 41:
        {
            this->subInfopanel = safe_cast<::Windows::UI::Xaml::Controls::StackPanel^>(__target);
        }
        break;
    case 42:
        {
            this->splitSide = safe_cast<::Windows::UI::Xaml::Controls::SplitView^>(__target);
        }
        break;
    case 43:
        {
            this->sidebarWebview = safe_cast<::Windows::UI::Xaml::Controls::WebView^>(__target);
        }
        break;
    case 44:
        {
            this->listGrid = safe_cast<::Windows::UI::Xaml::Controls::GridView^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::GridView^>(this->listGrid))->ItemClick += ref new ::Windows::UI::Xaml::Controls::ItemClickEventHandler(this, (void (::Reddit::SubRedditViewPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::ItemClickEventArgs^))&SubRedditViewPage::listGrid_ItemClick);
            (safe_cast<::Windows::UI::Xaml::Controls::GridView^>(this->listGrid))->ChoosingItemContainer += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs^>(this, (void (::Reddit::SubRedditViewPage::*)
                (::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs^))&SubRedditViewPage::listGrid_ChoosingItemContainer);
        }
        break;
    case 45:
        {
            this->listView = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
        }
        break;
    case 47:
        {
            this->subTextblock = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 49:
        {
            this->sideBarButton = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
        }
        break;
    case 50:
        {
            this->timeButton = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
        }
        break;
    case 51:
        {
            this->timeSelector = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::ListView^>(this->timeSelector))->SelectionChanged += ref new ::Windows::UI::Xaml::Controls::SelectionChangedEventHandler(this, (void (::Reddit::SubRedditViewPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::SelectionChangedEventArgs^))&SubRedditViewPage::rangeSelector_SelectionChanged);
        }
        break;
    case 53:
        {
            this->sortSelector = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::ListView^>(this->sortSelector))->SelectionChanged += ref new ::Windows::UI::Xaml::Controls::SelectionChangedEventHandler(this, (void (::Reddit::SubRedditViewPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::SelectionChangedEventArgs^))&SubRedditViewPage::sortSelector_SelectionChanged);
        }
        break;
    }
    _contentLoaded = true;
}

void ::Reddit::SubRedditViewPage::UnloadObject(::Windows::UI::Xaml::DependencyObject^ unloadableObject)
{
    if (unloadableObject != nullptr)
    {
        // SubRedditViewPage.xaml line 524
        if (unloadableObject == this->listGrid)
        {
            this->DisconnectUnloadedObject(44);
        }
        // SubRedditViewPage.xaml line 525
        if (unloadableObject == this->listView)
        {
            this->DisconnectUnloadedObject(45);
        }
        ::Windows::UI::Xaml::Markup::XamlMarkupHelper::UnloadObject(unloadableObject);        
    }
}

void ::Reddit::SubRedditViewPage::DisconnectUnloadedObject(int connectionId)
{
    switch(connectionId)
    {
        case 44: // SubRedditViewPage.xaml line 524
        {
            this->Bindings->DisconnectUnloadedObject(44);
            this->listGrid = nullptr;
            break;
        }
        case 45: // SubRedditViewPage.xaml line 525
        {
            this->Bindings->DisconnectUnloadedObject(45);
            this->listView = nullptr;
            break;
        }
        default:
        {
            throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
        }
    }
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::Reddit::SubRedditViewPage::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1: // SubRedditViewPage.xaml line 1
            {
                ::Windows::UI::Xaml::Controls::Page^ element1 = safe_cast<::Windows::UI::Xaml::Controls::Page^>(__target);
                SubRedditViewPage_obj1_Bindings* objBindings = new SubRedditViewPage_obj1_Bindings();
                objBindings->SetDataRoot(this);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
            }
            break;
        case 2: // SubRedditViewPage.xaml line 64
            {
                ::Windows::UI::Xaml::Controls::Grid^ element2 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                SubRedditViewPage_obj2_Bindings* objBindings = new SubRedditViewPage_obj2_Bindings();
                objBindings->SetDataRoot(element2->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element2);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element2, bindings);
            }
            break;
        case 10: // SubRedditViewPage.xaml line 23
            {
                ::Windows::UI::Xaml::Controls::Grid^ element10 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                SubRedditViewPage_obj10_Bindings* objBindings = new SubRedditViewPage_obj10_Bindings();
                objBindings->SetDataRoot(element10->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element10);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element10, bindings);
            }
            break;
        case 20: // SubRedditViewPage.xaml line 374
            {
                ::Windows::UI::Xaml::Controls::Grid^ element20 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                SubRedditViewPage_obj20_Bindings* objBindings = new SubRedditViewPage_obj20_Bindings();
                objBindings->SetDataRoot(element20->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element20);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element20, bindings);
            }
            break;
        case 29: // SubRedditViewPage.xaml line 334
            {
                ::Windows::UI::Xaml::Controls::Grid^ element29 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                SubRedditViewPage_obj29_Bindings* objBindings = new SubRedditViewPage_obj29_Bindings();
                objBindings->SetDataRoot(element29->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element29);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element29, bindings);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


