//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "SubRedditViewPage.xaml.h"

void ::Reddit::SubRedditViewPage::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///SubRedditViewPage.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::SubRedditViewPage::SubRedditViewPage_obj1_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::Reddit::SubRedditViewPage, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    SubRedditViewPage_obj1_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~SubRedditViewPage_obj1_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 2: // SubRedditViewPage.xaml line 29
                this->obj2 = safe_cast<::Windows::UI::Xaml::Controls::CommandBar^>(__target);
                break;
            case 3: // SubRedditViewPage.xaml line 137
                this->obj3 = safe_cast<::Windows::UI::Xaml::Controls::StackPanel^>(__target);
                break;
            case 4: // SubRedditViewPage.xaml line 144
                this->obj4 = safe_cast<::Windows::UI::Xaml::Controls::SplitView^>(__target);
                this->obj4->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::SplitView::IsPaneOpenProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->sideBarButton->IsChecked = safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("boxConv")->ConvertBack(this->obj4->IsPaneOpen, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr));
                            }
                        }));
                break;
            case 5: // SubRedditViewPage.xaml line 151
                this->obj5 = safe_cast<::Windows::UI::Xaml::Controls::ToggleSwitch^>(__target);
                this->obj5->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::ToggleSwitch::IsOnProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->SidebarUseCSS = this->obj5->IsOn;
                            }
                        }));
                break;
            case 7: // SubRedditViewPage.xaml line 158
                this->obj7 = safe_cast<::Windows::UI::Xaml::Controls::GridView^>(__target);
                // SubRedditViewPage.xaml line 158
                if (this->obj7 != nullptr)
                {
                    Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj7, this->obj7ItemsSourceDeferredValue, nullptr);
                }
                break;
            case 8: // SubRedditViewPage.xaml line 159
                this->obj8 = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
                // SubRedditViewPage.xaml line 159
                if (this->obj8 != nullptr)
                {
                    Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj8, this->obj8ItemsSourceDeferredValue, nullptr);
                }
                break;
            case 9: // SubRedditViewPage.xaml line 138
                this->obj9 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 11: // SubRedditViewPage.xaml line 141
                this->obj11 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 13: // SubRedditViewPage.xaml line 31
                this->obj13 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
                this->obj13->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->viewMode = this->obj13->IsChecked ? this->obj13->IsChecked->Value : false;
                            }
                        }));
                break;
            case 16: // SubRedditViewPage.xaml line 37
                this->obj16 = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
                break;
            case 17: // SubRedditViewPage.xaml line 74
                this->obj17 = safe_cast<::Windows::UI::Xaml::Controls::MenuFlyoutSeparator^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        switch (connectionId)
        {
            case 7: // SubRedditViewPage.xaml line 158
            {
                if (this->obj7 != nullptr)
                {
                    this->obj7ItemsSourceDeferredValue = this->obj7->ItemsSource;
                    this->obj7 = nullptr;
                }
                break;
            }
            case 8: // SubRedditViewPage.xaml line 159
            {
                if (this->obj8 != nullptr)
                {
                    this->obj8ItemsSourceDeferredValue = this->obj8->ItemsSource;
                    this->obj8 = nullptr;
                }
                break;
            }
            default:
            {
                throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
            }
        }
    }

    void UpdateUnloadedElement(int connectionId)
    {
        switch (connectionId)
        {
            case 7: // SubRedditViewPage.xaml line 158
            {
                // SubRedditViewPage.xaml line 158
                if (this->obj7LoadDeferredValue)
                {
                    this->GetDataRoot()->FindName("listGrid");
                }
                else
                {
                    this->GetDataRoot()->UnloadObject(this->obj7);
                }
                break;
            }
            case 8: // SubRedditViewPage.xaml line 159
            {
                // SubRedditViewPage.xaml line 159
                if (this->obj8LoadDeferredValue)
                {
                    this->GetDataRoot()->FindName("listView");
                }
                else
                {
                    this->GetDataRoot()->UnloadObject(this->obj8);
                }
                break;
            }
            default:
            {
                throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
            }
        }
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::CommandBar^ obj2;
    ::Windows::UI::Xaml::Controls::StackPanel^ obj3;
    ::Windows::UI::Xaml::Controls::SplitView^ obj4;
    ::Windows::UI::Xaml::Controls::ToggleSwitch^ obj5;
    ::Windows::UI::Xaml::Controls::GridView^ obj7;
    ::Platform::Object^ obj7ItemsSourceDeferredValue;
    ::Platform::Boolean obj7LoadDeferredValue;
    ::Windows::UI::Xaml::Controls::ListView^ obj8;
    ::Platform::Object^ obj8ItemsSourceDeferredValue;
    ::Platform::Boolean obj8LoadDeferredValue;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj9;
    ::Windows::UI::Xaml::Documents::Run^ obj11;
    ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj13;
    ::Windows::UI::Xaml::Controls::ListView^ obj16;
    ::Windows::UI::Xaml::Controls::MenuFlyoutSeparator^ obj17;
    std::list<int> UnloadedElementsToUpdate;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::UI::Xaml::DependencyObject^ cacheDPC_sideBarButton_IsChecked = nullptr;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;
    __int64 tokenDPC_sideBarButton_IsChecked = 0;

    void CompleteUpdate(int phase)
    {
        while (!this->UnloadedElementsToUpdate.empty())
        {
            this->UpdateUnloadedElement(this->UnloadedElementsToUpdate.front());
            this->UnloadedElementsToUpdate.pop_front();
        }
    }

    // Update methods for each path node used in binding steps.
    void Update_(::Reddit::SubRedditViewPage^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_subInfo(obj->subInfo, phase);
                this->Update_sideBarButton(obj->sideBarButton, phase);
                this->Update_SidebarUseCSS(obj->SidebarUseCSS, phase);
                this->Update_posts(obj->posts, phase);
                this->Update_viewMode(obj->viewMode, phase);
                this->Update_Sort(obj->Sort, phase);
            }
        }
        this->CompleteUpdate(phase);
    }
    void Update_subInfo(::account::subredditInfo obj, int phase)
    {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_subInfo_key_color(obj.key_color, phase);
                this->Update_subInfo_pname(obj.pname, phase);
                this->Update_subInfo_subscribers(obj.subscribers, phase);
            }
    }
    void Update_subInfo_key_color(::Windows::UI::Color obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 29
            Set_Windows_UI_Xaml_FrameworkElement_RequestedTheme(this->obj2, safe_cast<::Windows::UI::Xaml::ElementTheme>(this->LookupConverter("themeConv")->Convert(obj, ::Windows::UI::Xaml::ElementTheme::typeid, nullptr, nullptr)));
            // SubRedditViewPage.xaml line 29
            Set_Windows_UI_Xaml_Controls_Control_Background(this->obj2, safe_cast<::Windows::UI::Xaml::Media::Brush^>(this->LookupConverter("brushify")->Convert(obj, ::Windows::UI::Xaml::Media::Brush::typeid, nullptr, nullptr)), nullptr);
            // SubRedditViewPage.xaml line 137
            Set_Windows_UI_Xaml_FrameworkElement_RequestedTheme(this->obj3, safe_cast<::Windows::UI::Xaml::ElementTheme>(this->LookupConverter("themeConv")->Convert(obj, ::Windows::UI::Xaml::ElementTheme::typeid, nullptr, nullptr)));
        }
    }
    void Update_sideBarButton(::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj, int phase)
    {
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(obj, ::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty, &this->cacheDPC_sideBarButton_IsChecked, &this->tokenDPC_sideBarButton_IsChecked);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_sideBarButton_IsChecked(obj->IsChecked, phase);
            }
        }
    }
    void Update_sideBarButton_IsChecked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 144
            Set_Windows_UI_Xaml_Controls_SplitView_IsPaneOpen(this->obj4, safe_cast<::Platform::Boolean>(this->LookupConverter("boxConv")->Convert(obj, ::Platform::Boolean::typeid, nullptr, nullptr)));
        }
    }
    void Update_SidebarUseCSS(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 151
            Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this->obj5, obj);
        }
    }
    void Update_posts(::Windows::Foundation::Collections::IVector<::account::subpostUWP^>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 158
            if (this->obj7 != nullptr)
            {
                Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj7, obj, nullptr);
            }
            else
            {
                this->obj7ItemsSourceDeferredValue = obj;
            }
            // SubRedditViewPage.xaml line 159
            if (this->obj8 != nullptr)
            {
                Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj8, obj, nullptr);
            }
            else
            {
                this->obj8ItemsSourceDeferredValue = obj;
            }
        }
    }
    void Update_viewMode(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 158
            this->obj7LoadDeferredValue = safe_cast<::Platform::Boolean>(this->LookupConverter("boolFlipper")->Convert(obj, ::Platform::Boolean::typeid, nullptr, nullptr));
    
            if (safe_cast<::Platform::Boolean>(this->LookupConverter("boolFlipper")->Convert(obj, ::Platform::Boolean::typeid, nullptr, nullptr)))
            {
                this->GetDataRoot()->FindName("listGrid");
            }
            else
            {
                this->GetDataRoot()->UnloadObject(this->obj7);
            }
            // SubRedditViewPage.xaml line 159
            this->obj8LoadDeferredValue = obj;
    
            if (obj)
            {
                this->GetDataRoot()->FindName("listView");
            }
            else
            {
                this->GetDataRoot()->UnloadObject(this->obj8);
            }
            // SubRedditViewPage.xaml line 31
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj13, obj, nullptr);
        }
    }
    void Update_subInfo_pname(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 138
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj9, obj, nullptr);
        }
    }
    void Update_subInfo_subscribers(::default::uint32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 141
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj11, obj.ToString(), nullptr);
        }
    }
    void Update_Sort(::account::postSort obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // SubRedditViewPage.xaml line 37
            Set_Windows_UI_Xaml_UIElement_Visibility(this->obj16, safe_cast<::Windows::UI::Xaml::Visibility>(this->LookupConverter("rangeVisConv")->Convert(obj, ::Windows::UI::Xaml::Visibility::typeid, nullptr, nullptr)));
            // SubRedditViewPage.xaml line 74
            Set_Windows_UI_Xaml_UIElement_Visibility(this->obj17, safe_cast<::Windows::UI::Xaml::Visibility>(this->LookupConverter("rangeVisConv")->Convert(obj, ::Windows::UI::Xaml::Visibility::typeid, nullptr, nullptr)));
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
        this->_bindingsTracking->UpdateDependencyPropertyChangedListener(nullptr, ::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty, &this->cacheDPC_sideBarButton_IsChecked, &this->tokenDPC_sideBarButton_IsChecked);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::Reddit::SubRedditViewPage^ obj = safe_cast<::Reddit::SubRedditViewPage^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_subInfo(obj->subInfo, DATA_CHANGED);
                    this->Update_sideBarButton(obj->sideBarButton, DATA_CHANGED);
                    this->Update_SidebarUseCSS(obj->SidebarUseCSS, DATA_CHANGED);
                    this->Update_posts(obj->posts, DATA_CHANGED);
                    this->Update_viewMode(obj->viewMode, DATA_CHANGED);
                    this->Update_Sort(obj->Sort, DATA_CHANGED);
                }
            }
            else if (propName == "subInfo")
            {
                if (obj != nullptr)
                {
                    this->Update_subInfo(obj->subInfo, DATA_CHANGED);
                }
            }
            else if (propName == "SidebarUseCSS")
            {
                if (obj != nullptr)
                {
                    this->Update_SidebarUseCSS(obj->SidebarUseCSS, DATA_CHANGED);
                }
            }
            else if (propName == "posts")
            {
                if (obj != nullptr)
                {
                    this->Update_posts(obj->posts, DATA_CHANGED);
                }
            }
            else if (propName == "viewMode")
            {
                if (obj != nullptr)
                {
                    this->Update_viewMode(obj->viewMode, DATA_CHANGED);
                }
            }
            else if (propName == "Sort")
            {
                if (obj != nullptr)
                {
                    this->Update_Sort(obj->Sort, DATA_CHANGED);
                }
            }
        }
        this->CompleteUpdate(DATA_CHANGED);
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
        this->CompleteUpdate(DATA_CHANGED);
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
            if (sender->Equals(this->cacheDPC_sideBarButton_IsChecked) && ::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty->Equals(prop))
            {
                ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(sender);
                if (obj != nullptr)
                {
                    this->Update_sideBarButton_IsChecked(obj->IsChecked, DATA_CHANGED);
                }
            }
        }
    }
    static void Set_Windows_UI_Xaml_FrameworkElement_RequestedTheme(::Windows::UI::Xaml::FrameworkElement^ obj, ::Windows::UI::Xaml::ElementTheme value)
    {
        obj->RequestedTheme = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Control_Background(::Windows::UI::Xaml::Controls::Control^ obj, ::Windows::UI::Xaml::Media::Brush^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::UI::Xaml::Media::Brush^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::UI::Xaml::Media::Brush::typeid, targetNullValue);
        }
        obj->Background = value;
    }
    static void Set_Windows_UI_Xaml_Controls_SplitView_IsPaneOpen(::Windows::UI::Xaml::Controls::SplitView^ obj, ::Platform::Boolean value)
    {
        obj->IsPaneOpen = value;
    }
    static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(::Windows::UI::Xaml::Controls::ToggleSwitch^ obj, ::Platform::Boolean value)
    {
        obj->IsOn = value;
    }
    static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(::Windows::UI::Xaml::Controls::ItemsControl^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        obj->ItemsSource = value;
    }
    static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::Windows::UI::Xaml::Controls::TextBlock^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_Windows_UI_Xaml_Documents_Run_Text(::Windows::UI::Xaml::Documents::Run^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj, ::Platform::IBox<::Platform::Boolean>^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::IBox<::Platform::Boolean>^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::IBox<::Platform::Boolean>::typeid, targetNullValue);
        }
        obj->IsChecked = value;
    }
    static void Set_Windows_UI_Xaml_UIElement_Visibility(::Windows::UI::Xaml::UIElement^ obj, ::Windows::UI::Xaml::Visibility value)
    {
        obj->Visibility = value;
    }
};

void ::Reddit::SubRedditViewPage::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 2:
        {
            this->commandBar = safe_cast<::Windows::UI::Xaml::Controls::CommandBar^>(__target);
        }
        break;
    case 3:
        {
            this->subInfopanel = safe_cast<::Windows::UI::Xaml::Controls::StackPanel^>(__target);
        }
        break;
    case 4:
        {
            this->splitSide = safe_cast<::Windows::UI::Xaml::Controls::SplitView^>(__target);
        }
        break;
    case 6:
        {
            this->sidebarWebview = safe_cast<::Windows::UI::Xaml::Controls::WebView^>(__target);
        }
        break;
    case 7:
        {
            this->listGrid = safe_cast<::Windows::UI::Xaml::Controls::GridView^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::GridView^>(this->listGrid))->ItemClick += ref new ::Windows::UI::Xaml::Controls::ItemClickEventHandler(this, (void (::Reddit::SubRedditViewPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::ItemClickEventArgs^))&SubRedditViewPage::listGrid_ItemClick);
            (safe_cast<::Windows::UI::Xaml::Controls::GridView^>(this->listGrid))->ChoosingItemContainer += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs^>(this, (void (::Reddit::SubRedditViewPage::*)
                (::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs^))&SubRedditViewPage::listGrid_ChoosingItemContainer);
        }
        break;
    case 8:
        {
            this->listView = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::ListView^>(this->listView))->ItemClick += ref new ::Windows::UI::Xaml::Controls::ItemClickEventHandler(this, (void (::Reddit::SubRedditViewPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::ItemClickEventArgs^))&SubRedditViewPage::listGrid_ItemClick);
            (safe_cast<::Windows::UI::Xaml::Controls::ListView^>(this->listView))->ChoosingItemContainer += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs^>(this, (void (::Reddit::SubRedditViewPage::*)
                (::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs^))&SubRedditViewPage::listView_ChoosingItemContainer);
        }
        break;
    case 10:
        {
            this->subTextblock = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    case 12:
        {
            this->sideBarButton = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
        }
        break;
    case 14:
        {
            this->timeButton = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
        }
        break;
    case 15:
        {
            ::Windows::UI::Xaml::Controls::AppBarButton^ element15 = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(element15))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::SubRedditViewPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&SubRedditViewPage::postButton_click);
        }
        break;
    case 16:
        {
            this->timeSelector = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::ListView^>(this->timeSelector))->SelectionChanged += ref new ::Windows::UI::Xaml::Controls::SelectionChangedEventHandler(this, (void (::Reddit::SubRedditViewPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::SelectionChangedEventArgs^))&SubRedditViewPage::rangeSelector_SelectionChanged);
        }
        break;
    case 18:
        {
            this->sortSelector = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::ListView^>(this->sortSelector))->SelectionChanged += ref new ::Windows::UI::Xaml::Controls::SelectionChangedEventHandler(this, (void (::Reddit::SubRedditViewPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::SelectionChangedEventArgs^))&SubRedditViewPage::sortSelector_SelectionChanged);
        }
        break;
    }
    _contentLoaded = true;
}

void ::Reddit::SubRedditViewPage::UnloadObject(::Windows::UI::Xaml::DependencyObject^ unloadableObject)
{
    if (unloadableObject != nullptr)
    {
        // SubRedditViewPage.xaml line 158
        if (unloadableObject == this->listGrid)
        {
            this->DisconnectUnloadedObject(7);
        }
        // SubRedditViewPage.xaml line 159
        if (unloadableObject == this->listView)
        {
            this->DisconnectUnloadedObject(8);
        }
        ::Windows::UI::Xaml::Markup::XamlMarkupHelper::UnloadObject(unloadableObject);
    }
}

void ::Reddit::SubRedditViewPage::DisconnectUnloadedObject(int connectionId)
{
    switch(connectionId)
    {
        case 7: // SubRedditViewPage.xaml line 158
        {
            this->Bindings->DisconnectUnloadedObject(7);
            this->listGrid = nullptr;
            break;
        }
        case 8: // SubRedditViewPage.xaml line 159
        {
            this->Bindings->DisconnectUnloadedObject(8);
            this->listView = nullptr;
            break;
        }
        default:
        {
            throw ref new ::Platform::InvalidArgumentException("Invalid connectionId.");
        }
    }
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::Reddit::SubRedditViewPage::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1: // SubRedditViewPage.xaml line 1
            {
                ::Windows::UI::Xaml::Controls::Page^ element1 = safe_cast<::Windows::UI::Xaml::Controls::Page^>(__target);
                SubRedditViewPage_obj1_Bindings* objBindings = new SubRedditViewPage_obj1_Bindings();
                objBindings->SetDataRoot(this);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


