//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "MyResources.xaml.h"

void ::Reddit::MyResources::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///MyResources.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::MyResources::MyResources_obj7_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::account::subpostUWP, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
public:
    MyResources_obj7_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~MyResources_obj7_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 7: // MyResources.xaml line 197
                this->obj7 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
            case 8: // MyResources.xaml line 207
                this->obj8 = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
                break;
            case 9: // MyResources.xaml line 209
                this->obj9 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 10: // MyResources.xaml line 211
                this->obj10 = safe_cast<::ExpanderControl::Expander^>(__target);
                break;
            case 12: // MyResources.xaml line 223
                this->obj12 = safe_cast<::Reddit::AppBarToggleColoredButton^>(__target);
                break;
            case 13: // MyResources.xaml line 229
                this->obj13 = safe_cast<::Reddit::AppBarToggleColoredButton^>(__target);
                break;
            case 14: // MyResources.xaml line 234
                this->obj14 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
                this->obj14->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->saved = this->obj14->IsChecked ? this->obj14->IsChecked->Value : false;
                            }
                        }));
                break;
            case 16: // MyResources.xaml line 246
                this->obj16 = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
                break;
            case 17: // MyResources.xaml line 237
                this->obj17 = safe_cast<::Reddit::reportFlyout^>(__target);
                break;
            case 20: // MyResources.xaml line 220
                this->obj20 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 21: // MyResources.xaml line 218
                this->obj21 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 22: // MyResources.xaml line 218
                this->obj22 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 23: // MyResources.xaml line 215
                this->obj23 = safe_cast<::Reddit::EXplaceHolder^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
        ReleaseAllListeners();
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        switch (phase)
        {
            case 0:
                *nextPhase = -1;
                this->SetDataRoot(static_cast<::account::subpostUWP^>(item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    this->obj7.Resolve<::Windows::UI::Xaml::Controls::Grid>()->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
            default:
                *nextPhase = -1;
                break;
        }
        this->Update_((::account::subpostUWP^) item, 1 << phase);
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::ResourceDictionary^ resources)
    {
        this->localResources = resources;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj7;
    ::Windows::UI::Xaml::Controls::Button^ obj8;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj9;
    ::ExpanderControl::Expander^ obj10;
    ::Reddit::AppBarToggleColoredButton^ obj12;
    ::Reddit::AppBarToggleColoredButton^ obj13;
    ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj14;
    ::Windows::UI::Xaml::Controls::AppBarButton^ obj16;
    ::Reddit::reportFlyout^ obj17;
    ::Windows::UI::Xaml::Documents::Run^ obj20;
    ::Windows::UI::Xaml::Documents::Run^ obj21;
    ::Windows::UI::Xaml::Documents::Run^ obj22;
    ::Reddit::EXplaceHolder^ obj23;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::account::subpostUWP^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_thumbnail(obj->thumbnail, phase);
                this->Update_previewCommand(obj->previewCommand, phase);
                this->Update_Title(obj->Title, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_contentType(obj->contentType, phase);
                this->Update_Liked(obj->Liked, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changeupvote(obj->changeupvote, phase);
                this->Update_changedownvote(obj->changedownvote, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_saved(obj->saved, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_subreddit(obj->subreddit, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_score(obj->score, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_author(obj->author, phase);
            }
        }
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 246
            Set_Windows_UI_Xaml_FrameworkElement_DataContext(this->obj16, obj, nullptr);
            // MyResources.xaml line 215
            Set_Reddit_EXplaceHolder_post(this->obj23, obj, nullptr);
        }
    }
    void Update_thumbnail(::Windows::UI::Xaml::FrameworkElement^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 207
            Set_Windows_UI_Xaml_Controls_ContentControl_Content(this->obj8, obj, nullptr);
        }
    }
    void Update_previewCommand(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 207
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj8, obj, nullptr);
        }
    }
    void Update_Title(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 209
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj9, obj, nullptr);
        }
    }
    void Update_contentType(::account::postContentType obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 211
            Set_Windows_UI_Xaml_UIElement_Visibility(this->obj10, safe_cast<::Windows::UI::Xaml::Visibility>(this->LookupConverter("prevConv")->Convert(obj, ::Windows::UI::Xaml::Visibility::typeid, "self", nullptr)));
        }
    }
    void Update_Liked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 223
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj12, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("upvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
            // MyResources.xaml line 229
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj13, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("downvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_changeupvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 223
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj12, obj, nullptr);
        }
    }
    void Update_changedownvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 229
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj13, obj, nullptr);
        }
    }
    void Update_saved(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 234
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj14, obj, nullptr);
        }
    }
    void Update_subreddit(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 237
            Set_Reddit_reportFlyout_subreddit(this->obj17, obj, nullptr);
            // MyResources.xaml line 218
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj21, obj, nullptr);
        }
    }
    void Update_score(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 220
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj20, safe_cast<::Platform::String^>(this->LookupConverter("scoreVis")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_author(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 218
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj22, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::account::subpostUWP^ obj = safe_cast<::account::subpostUWP^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_contentType(obj->contentType, DATA_CHANGED);
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                    this->Update_saved(obj->saved, DATA_CHANGED);
                    this->Update_score(obj->score, DATA_CHANGED);
                }
            }
            else if (propName == "contentType")
            {
                if (obj != nullptr)
                {
                    this->Update_contentType(obj->contentType, DATA_CHANGED);
                }
            }
            else if (propName == "Liked")
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
            else if (propName == "saved")
            {
                if (obj != nullptr)
                {
                    this->Update_saved(obj->saved, DATA_CHANGED);
                }
            }
            else if (propName == "score")
            {
                if (obj != nullptr)
                {
                    this->Update_score(obj->score, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
    static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(::Windows::UI::Xaml::Controls::ContentControl^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        obj->Content = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(::Windows::UI::Xaml::Controls::Primitives::ButtonBase^ obj, ::Windows::UI::Xaml::Input::ICommand^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::UI::Xaml::Input::ICommand^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::UI::Xaml::Input::ICommand::typeid, targetNullValue);
        }
        obj->Command = value;
    }
    static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::Windows::UI::Xaml::Controls::TextBlock^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_Windows_UI_Xaml_UIElement_Visibility(::Windows::UI::Xaml::UIElement^ obj, ::Windows::UI::Xaml::Visibility value)
    {
        obj->Visibility = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj, ::Platform::IBox<::Platform::Boolean>^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::IBox<::Platform::Boolean>^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::IBox<::Platform::Boolean>::typeid, targetNullValue);
        }
        obj->IsChecked = value;
    }
    static void Set_Windows_UI_Xaml_FrameworkElement_DataContext(::Windows::UI::Xaml::FrameworkElement^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        obj->DataContext = value;
    }
    static void Set_Reddit_reportFlyout_subreddit(::Reddit::reportFlyout^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->subreddit = value;
    }
    static void Set_Windows_UI_Xaml_Documents_Run_Text(::Windows::UI::Xaml::Documents::Run^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_Reddit_EXplaceHolder_post(::Reddit::EXplaceHolder^ obj, ::account::subpostUWP^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::account::subpostUWP^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::account::subpostUWP::typeid, targetNullValue);
        }
        obj->post = value;
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::MyResources::MyResources_obj24_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::account::subpostUWP, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
public:
    MyResources_obj24_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~MyResources_obj24_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 24: // MyResources.xaml line 148
                this->obj24 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
            case 25: // MyResources.xaml line 154
                this->obj25 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 26: // MyResources.xaml line 155
                this->obj26 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 27: // MyResources.xaml line 186
                this->obj27 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 28: // MyResources.xaml line 190
                this->obj28 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 29: // MyResources.xaml line 160
                this->obj29 = safe_cast<::Reddit::NoToggleBehaviorButton^>(__target);
                break;
            case 30: // MyResources.xaml line 172
                this->obj30 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 31: // MyResources.xaml line 173
                this->obj31 = safe_cast<::Reddit::NoToggleBehaviorButton^>(__target);
                break;
            case 32: // MyResources.xaml line 157
                this->obj32 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
        ReleaseAllListeners();
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        switch (phase)
        {
            case 0:
                *nextPhase = -1;
                this->SetDataRoot(static_cast<::account::subpostUWP^>(item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    this->obj24.Resolve<::Windows::UI::Xaml::Controls::Grid>()->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
            default:
                *nextPhase = -1;
                break;
        }
        this->Update_((::account::subpostUWP^) item, 1 << phase);
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::ResourceDictionary^ resources)
    {
        this->localResources = resources;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj24;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj25;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj26;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj27;
    ::Windows::UI::Xaml::Documents::Run^ obj28;
    ::Reddit::NoToggleBehaviorButton^ obj29;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj30;
    ::Reddit::NoToggleBehaviorButton^ obj31;
    ::Windows::UI::Xaml::Documents::Run^ obj32;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::account::subpostUWP^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Title(obj->Title, phase);
                this->Update_author(obj->author, phase);
                this->Update_selftext(obj->selftext, phase);
                this->Update_num_comments(obj->num_comments, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Liked(obj->Liked, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changeupvote(obj->changeupvote, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_score(obj->score, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changedownvote(obj->changedownvote, phase);
                this->Update_subreddit(obj->subreddit, phase);
            }
        }
    }
    void Update_Title(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 154
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj25, obj, nullptr);
        }
    }
    void Update_author(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 155
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj26, obj, nullptr);
        }
    }
    void Update_selftext(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 186
            Set_mdblock_mdRichProperties_MD(this->obj27, obj, nullptr);
        }
    }
    void Update_num_comments(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 190
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj28, obj.ToString(), nullptr);
        }
    }
    void Update_Liked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 160
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj29, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("upvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
            // MyResources.xaml line 173
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj31, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("downvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_changeupvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 160
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj29, obj, nullptr);
        }
    }
    void Update_score(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 172
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj30, obj.ToString(), nullptr);
        }
    }
    void Update_changedownvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 173
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj31, obj, nullptr);
        }
    }
    void Update_subreddit(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 157
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj32, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::account::subpostUWP^ obj = safe_cast<::account::subpostUWP^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                    this->Update_score(obj->score, DATA_CHANGED);
                }
            }
            else if (propName == "Liked")
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
            else if (propName == "score")
            {
                if (obj != nullptr)
                {
                    this->Update_score(obj->score, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
    static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::Windows::UI::Xaml::Controls::TextBlock^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_mdblock_mdRichProperties_MD(::Windows::UI::Xaml::UIElement^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        ::mdblock::mdRichProperties::SetMD(obj, value);
    }
    static void Set_Windows_UI_Xaml_Documents_Run_Text(::Windows::UI::Xaml::Documents::Run^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj, ::Platform::IBox<::Platform::Boolean>^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::IBox<::Platform::Boolean>^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::IBox<::Platform::Boolean>::typeid, targetNullValue);
        }
        obj->IsChecked = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(::Windows::UI::Xaml::Controls::Primitives::ButtonBase^ obj, ::Windows::UI::Xaml::Input::ICommand^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::UI::Xaml::Input::ICommand^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::UI::Xaml::Input::ICommand::typeid, targetNullValue);
        }
        obj->Command = value;
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::MyResources::MyResources_obj33_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::account::subpostUWP, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
public:
    MyResources_obj33_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~MyResources_obj33_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 33: // MyResources.xaml line 112
                this->obj33 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
            case 34: // MyResources.xaml line 118
                this->obj34 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 35: // MyResources.xaml line 119
                this->obj35 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 36: // MyResources.xaml line 129
                this->obj36 = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
                break;
            case 37: // MyResources.xaml line 142
                this->obj37 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 38: // MyResources.xaml line 136
                this->obj38 = safe_cast<::Windows::UI::Xaml::Shapes::Path^>(__target);
                break;
            case 39: // MyResources.xaml line 133
                this->obj39 = safe_cast<::Windows::UI::Xaml::Media::Imaging::BitmapImage^>(__target);
                break;
            case 40: // MyResources.xaml line 124
                this->obj40 = safe_cast<::Reddit::NoToggleBehaviorButton^>(__target);
                break;
            case 41: // MyResources.xaml line 125
                this->obj41 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 42: // MyResources.xaml line 126
                this->obj42 = safe_cast<::Reddit::NoToggleBehaviorButton^>(__target);
                break;
            case 43: // MyResources.xaml line 121
                this->obj43 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
        ReleaseAllListeners();
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        switch (phase)
        {
            case 0:
                *nextPhase = -1;
                this->SetDataRoot(static_cast<::account::subpostUWP^>(item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    this->obj33.Resolve<::Windows::UI::Xaml::Controls::Grid>()->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
            default:
                *nextPhase = -1;
                break;
        }
        this->Update_((::account::subpostUWP^) item, 1 << phase);
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::ResourceDictionary^ resources)
    {
        this->localResources = resources;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj33;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj34;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj35;
    ::Windows::UI::Xaml::Controls::Button^ obj36;
    ::Windows::UI::Xaml::Documents::Run^ obj37;
    ::Windows::UI::Xaml::Shapes::Path^ obj38;
    ::Windows::UI::Xaml::Media::Imaging::BitmapImage^ obj39;
    ::Reddit::NoToggleBehaviorButton^ obj40;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj41;
    ::Reddit::NoToggleBehaviorButton^ obj42;
    ::Windows::UI::Xaml::Documents::Run^ obj43;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::account::subpostUWP^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Title(obj->Title, phase);
                this->Update_author(obj->author, phase);
                this->Update_previewCommand(obj->previewCommand, phase);
                this->Update_num_comments(obj->num_comments, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_contentType(obj->contentType, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_previewURI(obj->previewURI, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Liked(obj->Liked, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changeupvote(obj->changeupvote, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_score(obj->score, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changedownvote(obj->changedownvote, phase);
                this->Update_subreddit(obj->subreddit, phase);
            }
        }
    }
    void Update_Title(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 118
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj34, obj, nullptr);
        }
    }
    void Update_author(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 119
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj35, obj, nullptr);
        }
    }
    void Update_previewCommand(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 129
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj36, obj, nullptr);
        }
    }
    void Update_num_comments(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 142
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj37, obj.ToString(), nullptr);
        }
    }
    void Update_contentType(::account::postContentType obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 136
            Set_Windows_UI_Xaml_Shapes_Path_Data(this->obj38, safe_cast<::Windows::UI::Xaml::Media::Geometry^>(this->LookupConverter("pathdataconvz")->Convert(obj, ::Windows::UI::Xaml::Media::Geometry::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_previewURI(::Windows::Foundation::Uri^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 133
            Set_Windows_UI_Xaml_Media_Imaging_BitmapImage_UriSource(this->obj39, obj, nullptr);
        }
    }
    void Update_Liked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 124
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj40, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("upvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
            // MyResources.xaml line 126
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj42, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("downvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_changeupvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 124
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj40, obj, nullptr);
        }
    }
    void Update_score(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 125
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj41, obj.ToString(), nullptr);
        }
    }
    void Update_changedownvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 126
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj42, obj, nullptr);
        }
    }
    void Update_subreddit(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 121
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj43, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::account::subpostUWP^ obj = safe_cast<::account::subpostUWP^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_contentType(obj->contentType, DATA_CHANGED);
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                    this->Update_score(obj->score, DATA_CHANGED);
                }
            }
            else if (propName == "contentType")
            {
                if (obj != nullptr)
                {
                    this->Update_contentType(obj->contentType, DATA_CHANGED);
                }
            }
            else if (propName == "Liked")
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
            else if (propName == "score")
            {
                if (obj != nullptr)
                {
                    this->Update_score(obj->score, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
    static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::Windows::UI::Xaml::Controls::TextBlock^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(::Windows::UI::Xaml::Controls::Primitives::ButtonBase^ obj, ::Windows::UI::Xaml::Input::ICommand^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::UI::Xaml::Input::ICommand^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::UI::Xaml::Input::ICommand::typeid, targetNullValue);
        }
        obj->Command = value;
    }
    static void Set_Windows_UI_Xaml_Documents_Run_Text(::Windows::UI::Xaml::Documents::Run^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_Windows_UI_Xaml_Shapes_Path_Data(::Windows::UI::Xaml::Shapes::Path^ obj, ::Windows::UI::Xaml::Media::Geometry^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::UI::Xaml::Media::Geometry^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::UI::Xaml::Media::Geometry::typeid, targetNullValue);
        }
        obj->Data = value;
    }
    static void Set_Windows_UI_Xaml_Media_Imaging_BitmapImage_UriSource(::Windows::UI::Xaml::Media::Imaging::BitmapImage^ obj, ::Windows::Foundation::Uri^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::Foundation::Uri^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::Foundation::Uri::typeid, targetNullValue);
        }
        obj->UriSource = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj, ::Platform::IBox<::Platform::Boolean>^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::IBox<::Platform::Boolean>^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::IBox<::Platform::Boolean>::typeid, targetNullValue);
        }
        obj->IsChecked = value;
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::MyResources::MyResources_obj44_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::account::CommentUWPitem, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
public:
    MyResources_obj44_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~MyResources_obj44_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 44: // MyResources.xaml line 62
                this->obj44 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
            case 45: // MyResources.xaml line 76
                this->obj45 = safe_cast<::Windows::UI::Xaml::Controls::RichTextBlock^>(__target);
                break;
            case 46: // MyResources.xaml line 79
                this->obj46 = safe_cast<::Reddit::AppBarToggleColoredButton^>(__target);
                break;
            case 47: // MyResources.xaml line 84
                this->obj47 = safe_cast<::Reddit::AppBarToggleColoredButton^>(__target);
                break;
            case 48: // MyResources.xaml line 89
                this->obj48 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
                this->obj48->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->saved = this->obj48->IsChecked ? this->obj48->IsChecked->Value : false;
                            }
                        }));
                break;
            case 49: // MyResources.xaml line 95
                this->obj49 = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
                break;
            case 51: // MyResources.xaml line 92
                this->obj51 = safe_cast<::Reddit::reportFlyout^>(__target);
                break;
            case 52: // MyResources.xaml line 70
                this->obj52 = safe_cast<::Windows::UI::Xaml::Controls::HyperlinkButton^>(__target);
                break;
            case 53: // MyResources.xaml line 71
                this->obj53 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
        ReleaseAllListeners();
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        switch (phase)
        {
            case 0:
                *nextPhase = -1;
                this->SetDataRoot(static_cast<::account::CommentUWPitem^>(item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    this->obj44.Resolve<::Windows::UI::Xaml::Controls::Grid>()->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
            default:
                *nextPhase = -1;
                break;
        }
        this->Update_((::account::CommentUWPitem^) item, 1 << phase);
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::ResourceDictionary^ resources)
    {
        this->localResources = resources;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj44;
    ::Windows::UI::Xaml::Controls::RichTextBlock^ obj45;
    ::Reddit::AppBarToggleColoredButton^ obj46;
    ::Reddit::AppBarToggleColoredButton^ obj47;
    ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj48;
    ::Windows::UI::Xaml::Controls::AppBarButton^ obj49;
    ::Reddit::reportFlyout^ obj51;
    ::Windows::UI::Xaml::Controls::HyperlinkButton^ obj52;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj53;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::account::CommentUWPitem^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_mdElements(obj->mdElements, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Liked(obj->Liked, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_changeupvote(obj->changeupvote, phase);
                this->Update_changedownvote(obj->changedownvote, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_saved(obj->saved, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_isMine(obj->isMine, phase);
                this->Update_ParentSubreddit(obj->ParentSubreddit, phase);
                this->Update_author(obj->author, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_score(obj->score, phase);
            }
        }
        else
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->UpdateFallback_author(phase);
            }
        }
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 62
            if (this->obj44 != nullptr)
            {
                Set_Windows_UI_Xaml_FrameworkElement_Tag(this->obj44.Resolve<::Windows::UI::Xaml::Controls::Grid>(), obj, nullptr);
            }
        }
    }
    void Update_mdElements(::mdblock::refMDElements^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 76
            Set_mdblock_mdRichProperties_MDElements(this->obj45, obj, nullptr);
        }
    }
    void Update_Liked(::Platform::IBox<::Platform::Boolean>^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 79
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj46, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("upvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
            // MyResources.xaml line 84
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj47, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("downvoteconvert")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_changeupvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 79
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj46, obj, nullptr);
        }
    }
    void Update_changedownvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 84
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj47, obj, nullptr);
        }
    }
    void Update_saved(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 89
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj48, obj, nullptr);
        }
    }
    void Update_isMine(::Platform::Boolean obj, int phase)
    {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_isMine_Cast_isMine_To_Visibility(obj ? ::Windows::UI::Xaml::Visibility::Visible : ::Windows::UI::Xaml::Visibility::Collapsed, phase);
            }
    }
    void Update_isMine_Cast_isMine_To_Visibility(::Windows::UI::Xaml::Visibility obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 95
            Set_Windows_UI_Xaml_UIElement_Visibility(this->obj49, obj);
        }
    }
    void Update_ParentSubreddit(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 92
            Set_Reddit_reportFlyout_subreddit(this->obj51, obj, nullptr);
        }
    }
    void Update_author(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 70
            Set_Windows_UI_Xaml_Controls_ContentControl_Content(this->obj52, obj, nullptr);
        }
    }
    void Update_score(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // MyResources.xaml line 71
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj53, safe_cast<::Platform::String^>(this->LookupConverter("scoreVis")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }

    void UpdateFallback_author(int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // MyResources.xaml line 70
            Set_Windows_UI_Xaml_Controls_ContentControl_Content(this->obj52, (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, "username"), nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::account::CommentUWPitem^ obj = safe_cast<::account::CommentUWPitem^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                    this->Update_saved(obj->saved, DATA_CHANGED);
                    this->Update_score(obj->score, DATA_CHANGED);
                }
            }
            else if (propName == "Liked")
            {
                if (obj != nullptr)
                {
                    this->Update_Liked(obj->Liked, DATA_CHANGED);
                }
            }
            else if (propName == "saved")
            {
                if (obj != nullptr)
                {
                    this->Update_saved(obj->saved, DATA_CHANGED);
                }
            }
            else if (propName == "score")
            {
                if (obj != nullptr)
                {
                    this->Update_score(obj->score, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
    static void Set_Windows_UI_Xaml_FrameworkElement_Tag(::Windows::UI::Xaml::FrameworkElement^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        obj->Tag = value;
    }
    static void Set_mdblock_mdRichProperties_MDElements(::Windows::UI::Xaml::UIElement^ obj, ::mdblock::refMDElements^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::mdblock::refMDElements^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::mdblock::refMDElements::typeid, targetNullValue);
        }
        ::mdblock::mdRichProperties::SetMDElements(obj, value);
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj, ::Platform::IBox<::Platform::Boolean>^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::IBox<::Platform::Boolean>^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::IBox<::Platform::Boolean>::typeid, targetNullValue);
        }
        obj->IsChecked = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(::Windows::UI::Xaml::Controls::Primitives::ButtonBase^ obj, ::Windows::UI::Xaml::Input::ICommand^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::UI::Xaml::Input::ICommand^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::UI::Xaml::Input::ICommand::typeid, targetNullValue);
        }
        obj->Command = value;
    }
    static void Set_Windows_UI_Xaml_UIElement_Visibility(::Windows::UI::Xaml::UIElement^ obj, ::Windows::UI::Xaml::Visibility value)
    {
        obj->Visibility = value;
    }
    static void Set_Reddit_reportFlyout_subreddit(::Reddit::reportFlyout^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->subreddit = value;
    }
    static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(::Windows::UI::Xaml::Controls::ContentControl^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        obj->Content = value;
    }
    static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::Windows::UI::Xaml::Controls::TextBlock^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
};

void ::Reddit::MyResources::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 2:
        {
            this->inlineExpanderButtoning = safe_cast<::Windows::UI::Xaml::Controls::ControlTemplate^>(__target);
        }
        break;
    case 3:
        {
            this->listSelfPost = safe_cast<::Windows::UI::Xaml::DataTemplate^>(__target);
        }
        break;
    case 5:
        {
            ::Microsoft::Advertising::WinRT::UI::AdControl^ element5 = safe_cast<::Microsoft::Advertising::WinRT::UI::AdControl^>(__target);
            (safe_cast<::Microsoft::Advertising::WinRT::UI::AdControl^>(element5))->Loaded += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::MyResources::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&MyResources::AdControl_Loaded);
        }
        break;
    case 6:
        {
            ::Windows::UI::Xaml::Controls::RelativePanel^ element6 = safe_cast<::Windows::UI::Xaml::Controls::RelativePanel^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::RelativePanel^>(element6))->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(this, (void (::Reddit::MyResources::*)
                (::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^))&MyResources::adcontainer_loading);
        }
        break;
    case 10:
        {
            ::ExpanderControl::Expander^ element10 = safe_cast<::ExpanderControl::Expander^>(__target);
            (safe_cast<::ExpanderControl::Expander^>(element10))->Loaded += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::MyResources::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&MyResources::contentExpander_Loading);
        }
        break;
    case 11:
        {
            ::Windows::UI::Xaml::Controls::TextBlock^ element11 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(element11))->Loaded += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::MyResources::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&MyResources::TextBlock_Loaded);
        }
        break;
    case 15:
        {
            ::Windows::UI::Xaml::Controls::AppBarToggleButton^ element15 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(element15))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::MyResources::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&MyResources::replyButton_Click);
        }
        break;
    case 16:
        {
            ::Windows::UI::Xaml::Controls::AppBarButton^ element16 = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(element16))->Loaded += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::MyResources::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&MyResources::AppBarButton_Loaded);
        }
        break;
    case 18:
        {
            ::Windows::UI::Xaml::Documents::Hyperlink^ element18 = safe_cast<::Windows::UI::Xaml::Documents::Hyperlink^>(__target);
            (safe_cast<::Windows::UI::Xaml::Documents::Hyperlink^>(element18))->Click += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Documents::Hyperlink^, ::Windows::UI::Xaml::Documents::HyperlinkClickEventArgs^>(this, (void (::Reddit::MyResources::*)
                (::Windows::UI::Xaml::Documents::Hyperlink^, ::Windows::UI::Xaml::Documents::HyperlinkClickEventArgs^))&MyResources::username_click);
        }
        break;
    case 19:
        {
            ::Windows::UI::Xaml::Documents::Hyperlink^ element19 = safe_cast<::Windows::UI::Xaml::Documents::Hyperlink^>(__target);
            (safe_cast<::Windows::UI::Xaml::Documents::Hyperlink^>(element19))->Click += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Documents::Hyperlink^, ::Windows::UI::Xaml::Documents::HyperlinkClickEventArgs^>(this, (void (::Reddit::MyResources::*)
                (::Windows::UI::Xaml::Documents::Hyperlink^, ::Windows::UI::Xaml::Documents::HyperlinkClickEventArgs^))&MyResources::subreddit_click);
        }
        break;
    case 50:
        {
            ::Windows::UI::Xaml::Controls::AppBarToggleButton^ element50 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(element50))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::MyResources::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&MyResources::replyButton_Click);
        }
        break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::Reddit::MyResources::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 7: // MyResources.xaml line 197
            {
                ::Windows::UI::Xaml::Controls::Grid^ element7 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                MyResources_obj7_Bindings* objBindings = new MyResources_obj7_Bindings();
                objBindings->SetDataRoot(element7->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element7);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element7, bindings);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element7, bindings);
            }
            break;
        case 24: // MyResources.xaml line 148
            {
                ::Windows::UI::Xaml::Controls::Grid^ element24 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                MyResources_obj24_Bindings* objBindings = new MyResources_obj24_Bindings();
                objBindings->SetDataRoot(element24->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element24);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element24, bindings);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element24, bindings);
            }
            break;
        case 33: // MyResources.xaml line 112
            {
                ::Windows::UI::Xaml::Controls::Grid^ element33 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                MyResources_obj33_Bindings* objBindings = new MyResources_obj33_Bindings();
                objBindings->SetDataRoot(element33->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element33);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element33, bindings);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element33, bindings);
            }
            break;
        case 44: // MyResources.xaml line 62
            {
                ::Windows::UI::Xaml::Controls::Grid^ element44 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                MyResources_obj44_Bindings* objBindings = new MyResources_obj44_Bindings();
                objBindings->SetDataRoot(element44->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element44);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element44, bindings);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element44, bindings);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


