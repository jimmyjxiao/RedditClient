//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "CommentView.xaml.h"

void ::Reddit::CommentView::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///CommentView.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::CommentView::CommentView_obj4_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::TreeViewControl::TreeNode, ::XamlBindingInfo::XamlBindingTrackingBase>
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    CommentView_obj4_Bindings()
    {
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 4: // CommentView.xaml line 72
                this->obj4 = safe_cast<::Windows::UI::Xaml::Controls::Border^>(__target);
                break;
            case 5: // CommentView.xaml line 73
                this->obj5 = safe_cast<::Windows::UI::Xaml::Controls::HyperlinkButton^>(__target);
                (safe_cast<::Windows::UI::Xaml::Controls::HyperlinkButton^>(__target))->Click += ref new Windows::UI::Xaml::RoutedEventHandler([this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                {
                    (safe_cast<::account::moreComments^>(this->GetDataRoot()->Data))->clickedFunc();
                });
                break;
            case 6: // CommentView.xaml line 75
                this->obj6 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        switch (phase)
        {
            case 0:
                *nextPhase = -1;
                this->SetDataRoot(static_cast<::TreeViewControl::TreeNode^>(item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    this->obj4.Resolve<::Windows::UI::Xaml::Controls::Border>()->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
            default:
                *nextPhase = -1;
                break;
        }
        this->Update_((::TreeViewControl::TreeNode^) item, 1 << phase);
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj4;
    ::Windows::UI::Xaml::Controls::HyperlinkButton^ obj5;
    ::Windows::UI::Xaml::Documents::Run^ obj6;

    // Update methods for each path node used in binding steps.
    void Update_(::TreeViewControl::TreeNode^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Depth(obj->Depth, phase);
                this->Update_Data(obj->Data, phase);
            }
        }
    }
    void Update_Depth(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 72
            if (this->obj4 != nullptr)
            {
                Set_Windows_UI_Xaml_FrameworkElement_Margin(this->obj4.Resolve<::Windows::UI::Xaml::Controls::Border>(), safe_cast<::Windows::UI::Xaml::Thickness>(this->LookupConverter("IntToIndConverter")->Convert(obj, ::Windows::UI::Xaml::Thickness::typeid, nullptr, nullptr)));
            }
        }
    }
    void Update_Data(::Platform::Object^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_moreComments(safe_cast<::account::moreComments^>(obj), phase);
            }
        }
    }
    void Update_Data_Cast_Data_To_moreComments(::account::moreComments^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_moreComments_count(obj->count, phase);
            }
        }
    }
    void Update_Data_Cast_Data_To_moreComments_count(::default::uint32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 75
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj6, obj.ToString(), nullptr);
        }
    }
    static void Set_Windows_UI_Xaml_FrameworkElement_Margin(::Windows::UI::Xaml::FrameworkElement^ obj, ::Windows::UI::Xaml::Thickness value)
    {
        obj->Margin = value;
    }
    static void Set_Windows_UI_Xaml_Documents_Run_Text(::Windows::UI::Xaml::Documents::Run^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
};

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class Reddit::CommentView::CommentView_obj7_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::TreeViewControl::TreeNode, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    CommentView_obj7_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~CommentView_obj7_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 7: // CommentView.xaml line 23
                this->obj7 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
            case 8: // CommentView.xaml line 38
                this->obj8 = safe_cast<::Windows::UI::Xaml::Controls::RichTextBlock^>(__target);
                break;
            case 9: // CommentView.xaml line 41
                this->obj9 = safe_cast<::Reddit::AppBarToggleColoredButton^>(__target);
                break;
            case 10: // CommentView.xaml line 46
                this->obj10 = safe_cast<::Reddit::AppBarToggleColoredButton^>(__target);
                break;
            case 11: // CommentView.xaml line 51
                this->obj11 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
                this->obj11->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                (safe_cast<::account::CommentUWPitem^>(this->GetDataRoot()->Data))->saved = this->obj11->IsChecked ? this->obj11->IsChecked->Value : false;
                            }
                        }));
                break;
            case 12: // CommentView.xaml line 57
                this->obj12 = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
                break;
            case 13: // CommentView.xaml line 59
                this->obj13 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
                this->obj13->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->IsExpanded = safe_cast<::Platform::Boolean>(this->LookupConverter("inverseBoolConverter")->ConvertBack(this->obj13->IsChecked, ::Platform::Boolean::typeid, nullptr, nullptr));
                            }
                        }));
                break;
            case 15: // CommentView.xaml line 31
                this->obj15 = safe_cast<::Windows::UI::Xaml::Controls::HyperlinkButton^>(__target);
                break;
            case 16: // CommentView.xaml line 32
                this->obj16 = safe_cast<::Windows::UI::Xaml::Controls::ContentPresenter^>(__target);
                break;
            case 17: // CommentView.xaml line 34
                this->obj17 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
            case 18: // CommentView.xaml line 34
                this->obj18 = safe_cast<::Windows::UI::Xaml::Documents::Run^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
        ReleaseAllListeners();
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        switch (phase)
        {
            case 0:
                *nextPhase = -1;
                this->SetDataRoot(static_cast<::TreeViewControl::TreeNode^>(item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    this->obj7.Resolve<::Windows::UI::Xaml::Controls::Grid>()->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
            default:
                *nextPhase = -1;
                break;
        }
        this->Update_((::TreeViewControl::TreeNode^) item, 1 << phase);
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj7;
    ::Windows::UI::Xaml::Controls::RichTextBlock^ obj8;
    ::Reddit::AppBarToggleColoredButton^ obj9;
    ::Reddit::AppBarToggleColoredButton^ obj10;
    ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj11;
    ::Windows::UI::Xaml::Controls::AppBarButton^ obj12;
    ::Windows::UI::Xaml::Controls::AppBarToggleButton^ obj13;
    ::Windows::UI::Xaml::Controls::HyperlinkButton^ obj15;
    ::Windows::UI::Xaml::Controls::ContentPresenter^ obj16;
    ::Windows::UI::Xaml::Documents::Run^ obj17;
    ::Windows::UI::Xaml::Documents::Run^ obj18;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::UI::Xaml::Data::INotifyPropertyChanged^ cachePC_Data_Cast_Data_To_CommentUWPitem = nullptr;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_Data_Cast_Data_To_CommentUWPitem;

    // Update methods for each path node used in binding steps.
    void Update_(::TreeViewControl::TreeNode^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Depth(obj->Depth, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Data(obj->Data, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_HasItems(obj->HasItems, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_IsExpanded(obj->IsExpanded, phase);
            }
        }
        else
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->UpdateFallback_Data(phase);
            }
        }
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 23
            if (this->obj7 != nullptr)
            {
                Set_Windows_UI_Xaml_FrameworkElement_Tag(this->obj7.Resolve<::Windows::UI::Xaml::Controls::Grid>(), obj, nullptr);
            }
        }
    }
    void Update_Depth(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 23
            if (this->obj7 != nullptr)
            {
                Set_Windows_UI_Xaml_FrameworkElement_Margin(this->obj7.Resolve<::Windows::UI::Xaml::Controls::Grid>(), safe_cast<::Windows::UI::Xaml::Thickness>(this->LookupConverter("IntToIndConverter")->Convert(obj, ::Windows::UI::Xaml::Thickness::typeid, nullptr, nullptr)));
            }
            // CommentView.xaml line 23
            if (this->obj7 != nullptr)
            {
                Set_Windows_UI_Xaml_Controls_Panel_Background(this->obj7.Resolve<::Windows::UI::Xaml::Controls::Grid>(), safe_cast<::Windows::UI::Xaml::Media::Brush^>(this->LookupConverter("itemBrushConv")->Convert(obj, ::Windows::UI::Xaml::Media::Brush::typeid, nullptr, nullptr)), nullptr);
            }
        }
    }
    void Update_Data(::Platform::Object^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_CommentUWPitem(safe_cast<::account::CommentUWPitem^>(obj), phase);
            }
        }
        else
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->UpdateFallback_Data_Cast_Data_To_CommentUWPitem(phase);
            }
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem(::account::CommentUWPitem^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, &this->cachePC_Data_Cast_Data_To_CommentUWPitem, &tokenPC_Data_Cast_Data_To_CommentUWPitem);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_CommentUWPitem_mdElements(obj->mdElements, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_CommentUWPitem_Liked(obj->Liked, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_CommentUWPitem_changeupvote(obj->changeupvote, phase);
                this->Update_Data_Cast_Data_To_CommentUWPitem_changedownvote(obj->changedownvote, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_CommentUWPitem_saved(obj->saved, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_CommentUWPitem_isMine(obj->isMine, phase);
                this->Update_Data_Cast_Data_To_CommentUWPitem_author(obj->author, phase);
                this->Update_Data_Cast_Data_To_CommentUWPitem_DistinguishedAuthorType(obj->DistinguishedAuthorType, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_CommentUWPitem_ScoreText(obj->ScoreText, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_CommentUWPitem_CreatedString(obj->CreatedString, phase);
            }
        }
        else
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->UpdateFallback_Data_Cast_Data_To_CommentUWPitem_author(phase);
            }
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_mdElements(::mdblock::refMDElements^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 38
            Set_mdblock_mdRichProperties_MDElements(this->obj8, obj, nullptr);
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_Liked(::default::int32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // CommentView.xaml line 41
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj9, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("upvoteconverter")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
            // CommentView.xaml line 46
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj10, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("downvoteconverter")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_changeupvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 41
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj9, obj, nullptr);
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_changedownvote(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 46
            Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj10, obj, nullptr);
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_saved(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // CommentView.xaml line 51
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj11, obj, nullptr);
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_isMine(::Platform::Boolean obj, int phase)
    {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_Data_Cast_Data_To_CommentUWPitem_isMine_Cast_isMine_To_Visibility(obj ? ::Windows::UI::Xaml::Visibility::Visible : ::Windows::UI::Xaml::Visibility::Collapsed, phase);
            }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_isMine_Cast_isMine_To_Visibility(::Windows::UI::Xaml::Visibility obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 57
            Set_Windows_UI_Xaml_UIElement_Visibility(this->obj12, obj);
        }
    }
    void Update_HasItems(::Platform::Boolean obj, int phase)
    {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_HasItems_Cast_HasItems_To_Visibility(obj ? ::Windows::UI::Xaml::Visibility::Visible : ::Windows::UI::Xaml::Visibility::Collapsed, phase);
            }
    }
    void Update_HasItems_Cast_HasItems_To_Visibility(::Windows::UI::Xaml::Visibility obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 59
            Set_Windows_UI_Xaml_UIElement_Visibility(this->obj13, obj);
        }
    }
    void Update_IsExpanded(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // CommentView.xaml line 59
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj13, safe_cast<::Platform::IBox<::Platform::Boolean>^>(this->LookupConverter("inverseBoolConverter")->Convert(obj, ::Platform::IBox<::Platform::Boolean>::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_author(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 31
            Set_Windows_UI_Xaml_Controls_ContentControl_Content(this->obj15, obj, nullptr);
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_DistinguishedAuthorType(::account::DistinguishedAccountTypes obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 32
            Set_Windows_UI_Xaml_Controls_ContentPresenter_Content(this->obj16, safe_cast<::Platform::Object^>(this->LookupConverter("DistinguishedOPBadge")->Convert(obj, ::Platform::Object::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_ScoreText(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // CommentView.xaml line 34
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj17, obj, nullptr);
        }
    }
    void Update_Data_Cast_Data_To_CommentUWPitem_CreatedString(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 34
            Set_Windows_UI_Xaml_Documents_Run_Text(this->obj18, obj, nullptr);
        }
    }

    void UpdateFallback_Data(int phase)
    {
        this->UpdateFallback_Data_Cast_Data_To_CommentUWPitem(phase);
    }

    void UpdateFallback_Data_Cast_Data_To_CommentUWPitem(int phase)
    {
        this->UpdateFallback_Data_Cast_Data_To_CommentUWPitem_author(phase);
    }

    void UpdateFallback_Data_Cast_Data_To_CommentUWPitem_author(int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // CommentView.xaml line 31
            Set_Windows_UI_Xaml_Controls_ContentControl_Content(this->obj15, (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, "username"), nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, &this->cachePC_Data_Cast_Data_To_CommentUWPitem, &tokenPC_Data_Cast_Data_To_CommentUWPitem);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::TreeViewControl::TreeNode^ obj = safe_cast<::TreeViewControl::TreeNode^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_Data(obj->Data, DATA_CHANGED);
                    this->Update_IsExpanded(obj->IsExpanded, DATA_CHANGED);
                }
                else
                {
                    this->UpdateFallback_Data(DATA_CHANGED);
                }
            }
            else if (propName == "Data")
            {
                if (obj != nullptr)
                {
                    this->Update_Data(obj->Data, DATA_CHANGED);
                }
                else
                {
                    this->UpdateFallback_Data(DATA_CHANGED);
                }
            }
            else if (propName == "IsExpanded")
            {
                if (obj != nullptr)
                {
                    this->Update_IsExpanded(obj->IsExpanded, DATA_CHANGED);
                }
            }
        }
        if (cachePC_Data_Cast_Data_To_CommentUWPitem != nullptr && cachePC_Data_Cast_Data_To_CommentUWPitem->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::account::CommentUWPitem^ obj = safe_cast<::account::CommentUWPitem^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_Data_Cast_Data_To_CommentUWPitem_Liked(obj->Liked, DATA_CHANGED);
                    this->Update_Data_Cast_Data_To_CommentUWPitem_saved(obj->saved, DATA_CHANGED);
                    this->Update_Data_Cast_Data_To_CommentUWPitem_ScoreText(obj->ScoreText, DATA_CHANGED);
                }
            }
            else if (propName == "Liked")
            {
                if (obj != nullptr)
                {
                    this->Update_Data_Cast_Data_To_CommentUWPitem_Liked(obj->Liked, DATA_CHANGED);
                }
            }
            else if (propName == "saved")
            {
                if (obj != nullptr)
                {
                    this->Update_Data_Cast_Data_To_CommentUWPitem_saved(obj->saved, DATA_CHANGED);
                }
            }
            else if (propName == "ScoreText")
            {
                if (obj != nullptr)
                {
                    this->Update_Data_Cast_Data_To_CommentUWPitem_ScoreText(obj->ScoreText, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
    static void Set_Windows_UI_Xaml_FrameworkElement_Tag(::Windows::UI::Xaml::FrameworkElement^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        obj->Tag = value;
    }
    static void Set_Windows_UI_Xaml_FrameworkElement_Margin(::Windows::UI::Xaml::FrameworkElement^ obj, ::Windows::UI::Xaml::Thickness value)
    {
        obj->Margin = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Panel_Background(::Windows::UI::Xaml::Controls::Panel^ obj, ::Windows::UI::Xaml::Media::Brush^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::UI::Xaml::Media::Brush^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::UI::Xaml::Media::Brush::typeid, targetNullValue);
        }
        obj->Background = value;
    }
    static void Set_mdblock_mdRichProperties_MDElements(::Windows::UI::Xaml::UIElement^ obj, ::mdblock::refMDElements^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::mdblock::refMDElements^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::mdblock::refMDElements::typeid, targetNullValue);
        }
        ::mdblock::mdRichProperties::SetMDElements(obj, value);
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj, ::Platform::IBox<::Platform::Boolean>^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::IBox<::Platform::Boolean>^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::IBox<::Platform::Boolean>::typeid, targetNullValue);
        }
        obj->IsChecked = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(::Windows::UI::Xaml::Controls::Primitives::ButtonBase^ obj, ::Windows::UI::Xaml::Input::ICommand^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Windows::UI::Xaml::Input::ICommand^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Windows::UI::Xaml::Input::ICommand::typeid, targetNullValue);
        }
        obj->Command = value;
    }
    static void Set_Windows_UI_Xaml_UIElement_Visibility(::Windows::UI::Xaml::UIElement^ obj, ::Windows::UI::Xaml::Visibility value)
    {
        obj->Visibility = value;
    }
    static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(::Windows::UI::Xaml::Controls::ContentControl^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        obj->Content = value;
    }
    static void Set_Windows_UI_Xaml_Controls_ContentPresenter_Content(::Windows::UI::Xaml::Controls::ContentPresenter^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        obj->Content = value;
    }
    static void Set_Windows_UI_Xaml_Documents_Run_Text(::Windows::UI::Xaml::Documents::Run^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
};

void ::Reddit::CommentView::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 2:
        {
            this->commentTemplate = safe_cast<::Windows::UI::Xaml::DataTemplate^>(__target);
        }
        break;
    case 3:
        {
            this->loadmorebutton = safe_cast<::Windows::UI::Xaml::DataTemplate^>(__target);
        }
        break;
    case 14:
        {
            ::Windows::UI::Xaml::Controls::AppBarToggleButton^ element14 = safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::AppBarToggleButton^>(element14))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::CommentView::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&CommentView::replyButton_Click);
        }
        break;
    case 19:
        {
            this->commentTree = safe_cast<::TreeViewControl::TreeView^>(__target);
            (safe_cast<::TreeViewControl::TreeView^>(this->commentTree))->Loaded += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::Reddit::CommentView::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&CommentView::commentTree_Loaded);
            (safe_cast<::TreeViewControl::TreeView^>(this->commentTree))->ChoosingItemContainer += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs^>(this, (void (::Reddit::CommentView::*)
                (::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs^))&CommentView::commentTree_ChoosingItemContainer);
        }
        break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::Reddit::CommentView::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 4: // CommentView.xaml line 72
            {
                ::Windows::UI::Xaml::Controls::Border^ element4 = safe_cast<::Windows::UI::Xaml::Controls::Border^>(__target);
                CommentView_obj4_Bindings* objBindings = new CommentView_obj4_Bindings();
                objBindings->SetDataRoot(element4->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element4);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element4, bindings);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element4, bindings);
            }
            break;
        case 7: // CommentView.xaml line 23
            {
                ::Windows::UI::Xaml::Controls::Grid^ element7 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                CommentView_obj7_Bindings* objBindings = new CommentView_obj7_Bindings();
                objBindings->SetDataRoot(element7->DataContext);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element7);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element7, bindings);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element7, bindings);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


