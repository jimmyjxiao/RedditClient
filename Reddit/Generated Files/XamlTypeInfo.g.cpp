//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "CommentView.xaml.h"
#include "CommentViewPage.xaml.h"
#include "App.xaml.h"
#include "MainPage.xaml.h"
#include "subpostContentResizingPlaceholder.xaml.h"
#include "SubRedditViewPage.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "CommentView.g.hpp"
#include "CommentViewPage.g.hpp"
#include "App.g.hpp"
#include "MainPage.g.hpp"
#include "subpostContentResizingPlaceholder.g.hpp"
#include "SubRedditViewPage.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

template<typename TDeclaringType, typename TargetType>
::Platform::Object^ GetAttachableMember_Html(::Platform::Object^ instance)
{
    return TDeclaringType::GetHtml(safe_cast<TargetType^>(instance));
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_IndentMultiplier(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->IndentMultiplier);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_IsExpanded(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->IsExpanded);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Range(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Range);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Sort(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Sort);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_viewMode(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->viewMode);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_subInfo(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->subInfo);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_NSFW(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->NSFW);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_num_comments(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->num_comments);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_self(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->self);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_contentType(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->contentType);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_score(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->score);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Depth(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Depth);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_HasItems(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->HasItems);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Size(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Size);
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_RootNode(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->RootNode;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Header(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Header;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_HeaderTemplate(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->HeaderTemplate;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Subreddit(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Subreddit;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_posts(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->posts;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_subreddit(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->subreddit;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_link(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->link;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Title(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Title;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_OP(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->OP;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_selftext(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->selftext;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_selftext_html(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->selftext_html;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_thumbnailURI(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->thumbnailURI;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_previewURI(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->previewURI;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_changedownvote(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->changedownvote;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_changeupvote(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->changeupvote;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_previewCommand(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->previewCommand;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Liked(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Liked;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_ParentNode(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->ParentNode;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Data(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Data;
}

template<typename TDeclaringType, typename TTargetType, typename TValue>
void SetAttachableMember_Html(::Platform::Object^ instance, ::Platform::Object^ value)
{
    TDeclaringType::SetHtml(safe_cast<TTargetType^>(instance), (TValue)value);
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_Range(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Range = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_Sort(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Sort = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_contentType(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->contentType = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IndentMultiplier(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->IndentMultiplier = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsExpanded(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->IsExpanded = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_viewMode(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->viewMode = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_postID(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->postID = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_post(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->post = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Header(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Header = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_HeaderTemplate(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->HeaderTemplate = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_posts(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->posts = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_changedownvote(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->changedownvote = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_changeupvote(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->changeupvote = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_previewCommand(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->previewCommand = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Liked(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Liked = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ParentNode(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ParentNode = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Data(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Data = safe_cast<TValue^>(value);
}

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    int     createFromStringIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    bool    isLocalType;
    bool    isSystemType;
    bool    isReturnTypeStub;
    bool    isBindable;
};


std::function<::Platform::Object^(::Platform::String^)> CreateFromStringMethods[] =
{
    nullptr //Last entry is for padding
};

const TypeInfo TypeInfos[] = 
{
    //   0
    L"Int32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   1
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   2
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   3
    L"UInt32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   4
    L"Boolean", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   5
    L"System.Enum", L"",
    nullptr, nullptr, nullptr, nullptr,
    7, // System.ValueType
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, false,
    //   6
    L"Reddit.MainPage", L"",
    &ActivateType<::Reddit::MainPage>, nullptr, nullptr, nullptr,
    31, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   7
    L"System.ValueType", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, false,
    //   8
    L"account.postSort", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::account::postSort>,
    5, // System.Enum
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   9
    L"account.timerange", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::account::timerange>,
    5, // System.Enum
    0, 7, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  10
    L"Reddit.CommentView", L"",
    &ActivateType<::Reddit::CommentView>, nullptr, nullptr, nullptr,
    36, // Windows.UI.Xaml.Controls.UserControl
    0, 14, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  11
    L"account.subpostUWP", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    1, 14, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  12
    L"account.commentSort", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::account::commentSort>,
    5, // System.Enum
    18, 14, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  13
    L"Reddit.previewIconC", L"",
    &ActivateType<::Reddit::previewIconC>, nullptr, nullptr, nullptr,
    1, // Object
    18, 22, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  14
    L"html2xaml.Properties", L"",
    &ActivateType<::html2xaml::Properties>, nullptr, nullptr, nullptr,
    33, // Windows.UI.Xaml.DependencyObject
    18, 22, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, false,
    //  15
    L"account.subredditInfo", L"",
    nullptr, nullptr, nullptr, nullptr,
    7, // System.ValueType
    19, 22, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, true,  false,
    //  16
    L"converters.InverseBool", L"",
    &ActivateType<::converters::InverseBool>, nullptr, nullptr, nullptr,
    1, // Object
    19, 22, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  17
    L"Reddit.CommentViewPage", L"",
    &ActivateType<::Reddit::CommentViewPage>, nullptr, nullptr, nullptr,
    31, // Windows.UI.Xaml.Controls.Page
    19, 22, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  18
    L"Windows.Foundation.Uri", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    19, 22, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  19
    L"converters.unformatHtml", L"",
    &ActivateType<::converters::unformatHtml>, nullptr, nullptr, nullptr,
    1, // Object
    19, 22, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  20
    L"converters.BrushToColor", L"",
    &ActivateType<::converters::BrushToColor>, nullptr, nullptr, nullptr,
    1, // Object
    19, 22, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  21
    L"account.postContentType", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::account::postContentType>,
    5, // System.Enum
    19, 22, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  22
    L"converters.upvotechecked", L"",
    &ActivateType<::converters::upvotechecked>, nullptr, nullptr, nullptr,
    1, // Object
    19, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  23
    L"TreeViewControl.TreeView", L"",
    &ActivateType<::TreeViewControl::TreeView>, nullptr, nullptr, nullptr,
    34, // Windows.UI.Xaml.Controls.ListView
    19, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, false,
    //  24
    L"TreeViewControl.TreeNode", L"",
    &ActivateType<::TreeViewControl::TreeNode>, nullptr, nullptr, nullptr,
    1, // Object
    20, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, true, 
    //  25
    L"ExpanderControl.Expander", L"",
    &ActivateType<::ExpanderControl::Expander>, nullptr, nullptr, nullptr,
    39, // Windows.UI.Xaml.Controls.ContentControl
    26, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, false,
    //  26
    L"Reddit.SubRedditViewPage", L"",
    &ActivateType<::Reddit::SubRedditViewPage>, nullptr, nullptr, nullptr,
    31, // Windows.UI.Xaml.Controls.Page
    29, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  27
    L"Reddit.sortToTimeRangeVis", L"",
    &ActivateType<::Reddit::sortToTimeRangeVis>, nullptr, nullptr, nullptr,
    1, // Object
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  28
    L"converters.downvotechecked", L"",
    &ActivateType<::converters::downvotechecked>, nullptr, nullptr, nullptr,
    1, // Object
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  29
    L"Windows.UI.Xaml.DataTemplate", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  30
    L"TreeViewControl.TreeViewItem", L"",
    &ActivateType<::TreeViewControl::TreeViewItem>, nullptr, nullptr, nullptr,
    38, // Windows.UI.Xaml.Controls.ListViewItem
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, true, 
    //  31
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  32
    L"Windows.UI.Xaml.Input.ICommand", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  33
    L"Windows.UI.Xaml.DependencyObject", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  34
    L"Windows.UI.Xaml.Controls.ListView", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  35
    L"converters.NullableValueConverter", L"",
    &ActivateType<::converters::NullableValueConverter>, nullptr, nullptr, nullptr,
    1, // Object
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  36
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  37
    L"Windows.UI.Xaml.Controls.ItemsControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  38
    L"Windows.UI.Xaml.Controls.ListViewItem", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  39
    L"Windows.UI.Xaml.Controls.ContentControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  40
    L"Reddit.subpostContentResizingPlaceholder", L"",
    &ActivateType<::Reddit::subpostContentResizingPlaceholder>, nullptr, nullptr, nullptr,
    36, // Windows.UI.Xaml.Controls.UserControl
    35, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  41
    L"Windows.Foundation.IReference`1<Boolean>", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    36, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, true,  false,
    //  42
    L"TreeViewControl.IntegerToIndentationConverter", L"",
    &ActivateType<::TreeViewControl::IntegerToIndentationConverter>, nullptr, nullptr, nullptr,
    1, // Object
    36, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, false, false,
    //  43
    L"Windows.Foundation.Collections.IVector`1<account.subpostUWP>", L"",
    nullptr, &CollectionAdd<::Windows::Foundation::Collections::IVector<::account::subpostUWP^>, ::account::subpostUWP^>, nullptr, nullptr,
    -1,
    37, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, true,  false,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    37, 31, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    false, false, false, false,
};

const UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      1,   //   6
      4,   //   7
      5,   //   8
      5,   //   9
      5,   //  10
      5,   //  11
      6,   //  12
      6,   //  13
      6,   //  14
      6,   //  15
      7,   //  16
      9,   //  17
     10,   //  18
     12,   //  19
     14,   //  20
     15,   //  21
     16,   //  22
     19,   //  23
     22,   //  24
     27,   //  25
     28,   //  26
     29,   //  27
     29,   //  28
     31,   //  29
     32,   //  30
     33,   //  31
     33,   //  32
     34,   //  33
     36,   //  34
     36,   //  35
     36,   //  36
     37,   //  37
     39,   //  38
     39,   //  39
     40,   //  40
     42,   //  41
     42,   //  42
     42,   //  43
     42,   //  44
     42,   //  45
     43,   //  46
     43,   //  47
     43,   //  48
     43,   //  49
     43,   //  50
     43,   //  51
     43,   //  52
     43,   //  53
     43,   //  54
     43,   //  55
     43,   //  56
     43,   //  57
     43,   //  58
     43,   //  59
     43,   //  60
     44,   //  61
};

struct EnumValueInfo
{
    PCWSTR name;
    int eValue;
};

const EnumValueInfo EnumValues[] =
{ 
    L"hot", (int) ::account::postSort::hot,
    L"New", (int) ::account::postSort::New,
    L"rising", (int) ::account::postSort::rising,
    L"controversial", (int) ::account::postSort::controversial,
    L"top", (int) ::account::postSort::top,
    L"gilded", (int) ::account::postSort::gilded,
    L"Defaultsort", (int) ::account::postSort::Defaultsort,
    L"hour", (int) ::account::timerange::hour,
    L"day", (int) ::account::timerange::day,
    L"week", (int) ::account::timerange::week,
    L"month", (int) ::account::timerange::month,
    L"year", (int) ::account::timerange::year,
    L"all", (int) ::account::timerange::all,
    L"Default", (int) ::account::timerange::Default,
    L"best", (int) ::account::commentSort::best,
    L"top", (int) ::account::commentSort::top,
    L"New", (int) ::account::commentSort::New,
    L"controversial", (int) ::account::commentSort::controversial,
    L"old", (int) ::account::commentSort::old,
    L"qa", (int) ::account::commentSort::qa,
    L"default", (int) ::account::commentSort::default,
    L"random", (int) ::account::commentSort::random,
    L"selftype", (int) ::account::postContentType::selftype,
    L"imagetype", (int) ::account::postContentType::imagetype,
    L"linktype", (int) ::account::postContentType::linktype,
    L"giftype", (int) ::account::postContentType::giftype,
    L"videotype", (int) ::account::postContentType::videotype,
    L"adtype", (int) ::account::postContentType::adtype,
    L"ytvideotype", (int) ::account::postContentType::ytvideotype,
    L"albumtype", (int) ::account::postContentType::albumtype,
    L"imgurpending", (int) ::account::postContentType::imgurpending,
};

struct MemberInfo 
{
    PCWSTR shortName;
    ::Platform::Object^ (*getter)(::Platform::Object^);
    void (*setter)(::Platform::Object^, ::Platform::Object^);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

const MemberInfo MemberInfos[] = 
{
    //   0 - Reddit.CommentView.postID
    L"postID",
    nullptr,
    &SetReferenceTypeMember_postID<::Reddit::CommentView, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   1 - account.subpostUWP.NSFW
    L"NSFW",
    &GetValueTypeMember_NSFW<::account::subpostUWP, ::Platform::Boolean>,
    nullptr,
    4, // Boolean
    -1,
    true,  false, false,
    //   2 - account.subpostUWP.num_comments
    L"num_comments",
    &GetValueTypeMember_num_comments<::account::subpostUWP, ::default::int32>,
    nullptr,
    0, // Int32
    -1,
    true,  false, false,
    //   3 - account.subpostUWP.subreddit
    L"subreddit",
    &GetReferenceTypeMember_subreddit<::account::subpostUWP>,
    nullptr,
    2, // String
    -1,
    true,  false, false,
    //   4 - account.subpostUWP.self
    L"self",
    &GetValueTypeMember_self<::account::subpostUWP, ::Platform::Boolean>,
    nullptr,
    4, // Boolean
    -1,
    true,  false, false,
    //   5 - account.subpostUWP.link
    L"link",
    &GetReferenceTypeMember_link<::account::subpostUWP>,
    nullptr,
    2, // String
    -1,
    true,  false, false,
    //   6 - account.subpostUWP.Title
    L"Title",
    &GetReferenceTypeMember_Title<::account::subpostUWP>,
    nullptr,
    2, // String
    -1,
    true,  false, false,
    //   7 - account.subpostUWP.OP
    L"OP",
    &GetReferenceTypeMember_OP<::account::subpostUWP>,
    nullptr,
    2, // String
    -1,
    true,  false, false,
    //   8 - account.subpostUWP.selftext
    L"selftext",
    &GetReferenceTypeMember_selftext<::account::subpostUWP>,
    nullptr,
    2, // String
    -1,
    true,  false, false,
    //   9 - account.subpostUWP.selftext_html
    L"selftext_html",
    &GetReferenceTypeMember_selftext_html<::account::subpostUWP>,
    nullptr,
    2, // String
    -1,
    true,  false, false,
    //  10 - account.subpostUWP.contentType
    L"contentType",
    &GetValueTypeMember_contentType<::account::subpostUWP, ::account::postContentType>,
    &SetEnumMember_contentType<::account::subpostUWP, ::account::postContentType>,
    21, // account.postContentType
    -1,
    false, false, false,
    //  11 - account.subpostUWP.thumbnailURI
    L"thumbnailURI",
    &GetReferenceTypeMember_thumbnailURI<::account::subpostUWP>,
    nullptr,
    18, // Windows.Foundation.Uri
    -1,
    true,  false, false,
    //  12 - account.subpostUWP.previewURI
    L"previewURI",
    &GetReferenceTypeMember_previewURI<::account::subpostUWP>,
    nullptr,
    18, // Windows.Foundation.Uri
    -1,
    true,  false, false,
    //  13 - account.subpostUWP.changedownvote
    L"changedownvote",
    &GetReferenceTypeMember_changedownvote<::account::subpostUWP>,
    &SetReferenceTypeMember_changedownvote<::account::subpostUWP, ::Windows::UI::Xaml::Input::ICommand>,
    32, // Windows.UI.Xaml.Input.ICommand
    -1,
    false, false, false,
    //  14 - account.subpostUWP.changeupvote
    L"changeupvote",
    &GetReferenceTypeMember_changeupvote<::account::subpostUWP>,
    &SetReferenceTypeMember_changeupvote<::account::subpostUWP, ::Windows::UI::Xaml::Input::ICommand>,
    32, // Windows.UI.Xaml.Input.ICommand
    -1,
    false, false, false,
    //  15 - account.subpostUWP.previewCommand
    L"previewCommand",
    &GetReferenceTypeMember_previewCommand<::account::subpostUWP>,
    &SetReferenceTypeMember_previewCommand<::account::subpostUWP, ::Windows::UI::Xaml::Input::ICommand>,
    32, // Windows.UI.Xaml.Input.ICommand
    -1,
    false, false, false,
    //  16 - account.subpostUWP.Liked
    L"Liked",
    &GetReferenceTypeMember_Liked<::account::subpostUWP>,
    &SetReferenceTypeMember_Liked<::account::subpostUWP, ::Platform::IBox<::Platform::Boolean>>,
    41, // Windows.Foundation.IReference`1<Boolean>
    -1,
    false, false, false,
    //  17 - account.subpostUWP.score
    L"score",
    &GetValueTypeMember_score<::account::subpostUWP, ::default::int32>,
    nullptr,
    0, // Int32
    -1,
    true,  false, false,
    //  18 - html2xaml.Properties.Html
    L"Html",
    &GetAttachableMember_Html<::html2xaml::Properties, ::Windows::UI::Xaml::DependencyObject>,
    &SetAttachableMember_Html<::html2xaml::Properties, ::Windows::UI::Xaml::DependencyObject, ::Platform::String^>,
    2, // String
    33, // Windows.UI.Xaml.DependencyObject
    false, true,  true, 
    //  19 - TreeViewControl.TreeView.RootNode
    L"RootNode",
    &GetReferenceTypeMember_RootNode<::TreeViewControl::TreeView>,
    nullptr,
    24, // TreeViewControl.TreeNode
    -1,
    true,  false, false,
    //  20 - TreeViewControl.TreeNode.Depth
    L"Depth",
    &GetValueTypeMember_Depth<::TreeViewControl::TreeNode, ::default::int32>,
    nullptr,
    0, // Int32
    -1,
    true,  false, false,
    //  21 - TreeViewControl.TreeNode.HasItems
    L"HasItems",
    &GetValueTypeMember_HasItems<::TreeViewControl::TreeNode, ::Platform::Boolean>,
    nullptr,
    4, // Boolean
    -1,
    true,  false, false,
    //  22 - TreeViewControl.TreeNode.IsExpanded
    L"IsExpanded",
    &GetValueTypeMember_IsExpanded<::TreeViewControl::TreeNode, ::Platform::Boolean>,
    &SetValueTypeMember_IsExpanded<::TreeViewControl::TreeNode, ::Platform::Boolean>,
    4, // Boolean
    -1,
    false, false, false,
    //  23 - TreeViewControl.TreeNode.ParentNode
    L"ParentNode",
    &GetReferenceTypeMember_ParentNode<::TreeViewControl::TreeNode>,
    &SetReferenceTypeMember_ParentNode<::TreeViewControl::TreeNode, ::TreeViewControl::TreeNode>,
    24, // TreeViewControl.TreeNode
    -1,
    false, false, false,
    //  24 - TreeViewControl.TreeNode.Data
    L"Data",
    &GetReferenceTypeMember_Data<::TreeViewControl::TreeNode>,
    &SetReferenceTypeMember_Data<::TreeViewControl::TreeNode, ::Platform::Object>,
    1, // Object
    -1,
    false, false, false,
    //  25 - TreeViewControl.TreeNode.Size
    L"Size",
    &GetValueTypeMember_Size<::TreeViewControl::TreeNode, ::default::uint32>,
    nullptr,
    3, // UInt32
    -1,
    true,  false, false,
    //  26 - ExpanderControl.Expander.IsExpanded
    L"IsExpanded",
    &GetValueTypeMember_IsExpanded<::ExpanderControl::Expander, ::Platform::Boolean>,
    &SetValueTypeMember_IsExpanded<::ExpanderControl::Expander, ::Platform::Boolean>,
    4, // Boolean
    -1,
    false, true,  false,
    //  27 - ExpanderControl.Expander.Header
    L"Header",
    &GetReferenceTypeMember_Header<::ExpanderControl::Expander>,
    &SetReferenceTypeMember_Header<::ExpanderControl::Expander, ::Platform::String>,
    2, // String
    -1,
    false, true,  false,
    //  28 - ExpanderControl.Expander.HeaderTemplate
    L"HeaderTemplate",
    &GetReferenceTypeMember_HeaderTemplate<::ExpanderControl::Expander>,
    &SetReferenceTypeMember_HeaderTemplate<::ExpanderControl::Expander, ::Windows::UI::Xaml::DataTemplate>,
    29, // Windows.UI.Xaml.DataTemplate
    -1,
    false, true,  false,
    //  29 - Reddit.SubRedditViewPage.Range
    L"Range",
    &GetValueTypeMember_Range<::Reddit::SubRedditViewPage, ::account::timerange>,
    &SetEnumMember_Range<::Reddit::SubRedditViewPage, ::account::timerange>,
    9, // account.timerange
    -1,
    false, false, false,
    //  30 - Reddit.SubRedditViewPage.Sort
    L"Sort",
    &GetValueTypeMember_Sort<::Reddit::SubRedditViewPage, ::account::postSort>,
    &SetEnumMember_Sort<::Reddit::SubRedditViewPage, ::account::postSort>,
    8, // account.postSort
    -1,
    false, false, false,
    //  31 - Reddit.SubRedditViewPage.Subreddit
    L"Subreddit",
    &GetReferenceTypeMember_Subreddit<::Reddit::SubRedditViewPage>,
    nullptr,
    2, // String
    -1,
    true,  false, false,
    //  32 - Reddit.SubRedditViewPage.viewMode
    L"viewMode",
    &GetValueTypeMember_viewMode<::Reddit::SubRedditViewPage, ::Platform::Boolean>,
    &SetValueTypeMember_viewMode<::Reddit::SubRedditViewPage, ::Platform::Boolean>,
    4, // Boolean
    -1,
    false, false, false,
    //  33 - Reddit.SubRedditViewPage.subInfo
    L"subInfo",
    &GetValueTypeMember_subInfo<::Reddit::SubRedditViewPage, ::account::subredditInfo>,
    nullptr,
    15, // account.subredditInfo
    -1,
    true,  false, false,
    //  34 - Reddit.SubRedditViewPage.posts
    L"posts",
    &GetReferenceTypeMember_posts<::Reddit::SubRedditViewPage>,
    &SetReferenceTypeMember_posts<::Reddit::SubRedditViewPage, ::Windows::Foundation::Collections::IVector<::account::subpostUWP^>>,
    43, // Windows.Foundation.Collections.IVector`1<account.subpostUWP>
    -1,
    false, false, false,
    //  35 - Reddit.subpostContentResizingPlaceholder.post
    L"post",
    nullptr,
    &SetReferenceTypeMember_post<::Reddit::subpostContentResizingPlaceholder, ::account::subpostUWP>,
    11, // account.subpostUWP
    -1,
    false, false, false,
    //  36 - TreeViewControl.IntegerToIndentationConverter.IndentMultiplier
    L"IndentMultiplier",
    &GetValueTypeMember_IndentMultiplier<::TreeViewControl::IntegerToIndentationConverter, ::default::int32>,
    &SetValueTypeMember_IndentMultiplier<::TreeViewControl::IntegerToIndentationConverter, ::default::int32>,
    0, // Int32
    -1,
    false, false, false,
};

PCWSTR GetShortName(PCWSTR longName)
{
    PCWSTR separator = wcsrchr(longName, '.');
    return separator != nullptr ? separator + 1: longName;
}

const TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    int typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

const MemberInfo* GetMemberInfo(::Platform::String^ longMemberName)
{
    for (int lastDotIndex = longMemberName->Length(); lastDotIndex >= 0; lastDotIndex--)
    {
        if (longMemberName->Data()[lastDotIndex] == '.')
        {
            const TypeInfo* pTypeInfo = GetTypeInfo(ref new ::Platform::String(longMemberName->Data(), lastDotIndex));
            const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            if (pTypeInfo)
            {
                PCWSTR shortMemberName = GetShortName(longMemberName->Data());
                for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
                {
                    if (wcscmp(shortMemberName, MemberInfos[i].shortName) == 0)
                    {
                        return &MemberInfos[i];
                    }
                }
            }
            break;
        }
    }
    return nullptr;
}

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        ::Windows::UI::Xaml::Markup::IXamlMetadataProvider^ provider;
        provider = ref new ::ExpanderControl::ExpanderControl_XamlTypeInfo::XamlMetaDataProvider();
        otherProviders->Append(provider); 
        provider = ref new ::html2xaml::RichTextBlock_Html2Xaml_XamlTypeInfo::XamlMetaDataProvider();
        otherProviders->Append(provider); 
        provider = ref new ::RichMarkdownBox::RichMarkdownBox_XamlTypeInfo::XamlMetaDataProvider();
        otherProviders->Append(provider); 
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    const TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->isSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->isLocalType;
        userType->IsReturnTypeStub = pTypeInfo->isReturnTypeStub;
        userType->IsBindable = pTypeInfo->isBindable;
        userType->CreateFromStringMethod = nullptr;
        if (pTypeInfo->createFromStringIndex != -1)
        {
            userType->CreateFromStringMethod = &(CreateFromStringMethods[pTypeInfo->createFromStringIndex]);
        }
        int nextMemberIndex = pTypeInfo->firstMemberIndex;
        for (int i=pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
        {
            userType->AddMemberName(::Platform::StringReference(MemberInfos[i].shortName));
            nextMemberIndex++;
        }
        for (int i = pTypeInfo->firstEnumValueIndex; i < pNextTypeInfo->firstEnumValueIndex; i++)
        {
            userType->AddEnumValue(
                ::Platform::StringReference(EnumValues[i].name),
                ::Windows::Foundation::PropertyValue::CreateInt32(EnumValues[i].eValue));
        }
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    const MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (pMemberInfo != nullptr)
    {
        xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(
            this,
            ::Platform::StringReference(pMemberInfo->shortName),
            ::Platform::StringReference(TypeInfos[pMemberInfo->typeIndex].typeName));
        xamlMember->Getter = pMemberInfo->getter;
        xamlMember->Setter = pMemberInfo->setter;
        xamlMember->TargetTypeName = pMemberInfo->targetTypeIndex >= 0 ? ::Platform::StringReference(TypeInfos[pMemberInfo->targetTypeIndex].typeName) : L"";
        xamlMember->IsReadOnly = pMemberInfo->isReadOnly;
        xamlMember->IsDependencyProperty = pMemberInfo->isDependencyProperty;
        xamlMember->IsAttachable = pMemberInfo->isAttachable;
    }
    return xamlMember;
}

